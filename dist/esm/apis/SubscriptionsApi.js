/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { SubscriptionEventsResponseFromJSON, SubscriptionRequestToJSON, SubscriptionResponseFromJSON, SubscriptionUpdateRequestToJSON, } from '../models';
/**
 *
 */
export class SubscriptionsApi extends runtime.BaseAPI {
    /**
     * You can cancel the subscription to stop the plans that your customers consume
     * Cancel Subscription
     */
    cancelSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancelSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can cancel the subscription to stop the plans that your customers consume
     * Cancel Subscription
     */
    cancelSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can create the subscription to include the plans that your customers consume
     * Create Subscription
     */
    createSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling createSubscription.');
            }
            if (requestParameters.subscriptionRequest === null || requestParameters.subscriptionRequest === undefined) {
                throw new runtime.RequiredError('subscriptionRequest', 'Required parameter requestParameters.subscriptionRequest was null or undefined when calling createSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SubscriptionRequestToJSON(requestParameters.subscriptionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can create the subscription to include the plans that your customers consume
     * Create Subscription
     */
    createSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can get the events of the subscription(s) of a client, with the customer id
     * Get Events By Subscription
     */
    getAllEventsFromSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getAllEventsFromSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionEventsResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can get the events of the subscription(s) of a client, with the customer id
     * Get Events By Subscription
     */
    getAllEventsFromSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllEventsFromSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Subscription
     */
    getSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get Subscription
     */
    getSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can pause the subscription to stop the plans that your customers consume
     * Pause Subscription
     */
    pauseSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling pauseSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription/pause`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can pause the subscription to stop the plans that your customers consume
     * Pause Subscription
     */
    pauseSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pauseSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can resume the subscription to start the plans that your customers consume
     * Resume Subscription
     */
    resumeSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling resumeSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription/resume`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can resume the subscription to start the plans that your customers consume
     * Resume Subscription
     */
    resumeSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resumeSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can modify the subscription to change the plans that your customers consume
     * Update Subscription
     */
    updateSubscriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateSubscription.');
            }
            if (requestParameters.subscriptionUpdateRequest === null || requestParameters.subscriptionUpdateRequest === undefined) {
                throw new runtime.RequiredError('subscriptionUpdateRequest', 'Required parameter requestParameters.subscriptionUpdateRequest was null or undefined when calling updateSubscription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/subscription`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SubscriptionUpdateRequestToJSON(requestParameters.subscriptionUpdateRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can modify the subscription to change the plans that your customers consume
     * Update Subscription
     */
    updateSubscription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateSubscriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const CancelSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const CreateSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const GetAllEventsFromSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const GetSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const PauseSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const ResumeSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const UpdateSubscriptionAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
