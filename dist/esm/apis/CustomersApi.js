/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CreateCustomerFiscalEntitiesResponseFromJSON, CustomerToJSON, CustomerFiscalEntitiesRequestToJSON, CustomerResponseFromJSON, CustomerUpdateFiscalEntitiesRequestToJSON, CustomersResponseFromJSON, UpdateCustomerToJSON, UpdateCustomerFiscalEntitiesResponseFromJSON, } from '../models';
/**
 *
 */
export class CustomersApi extends runtime.BaseAPI {
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * Create customer
     */
    createCustomerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customer === null || requestParameters.customer === undefined) {
                throw new runtime.RequiredError('customer', 'Required parameter requestParameters.customer was null or undefined when calling createCustomer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CustomerToJSON(requestParameters.customer),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
        });
    }
    /**
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     * Create customer
     */
    createCustomer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCustomerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * Create Fiscal Entity
     */
    createCustomerFiscalEntitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling createCustomerFiscalEntities.');
            }
            if (requestParameters.customerFiscalEntitiesRequest === null || requestParameters.customerFiscalEntitiesRequest === undefined) {
                throw new runtime.RequiredError('customerFiscalEntitiesRequest', 'Required parameter requestParameters.customerFiscalEntitiesRequest was null or undefined when calling createCustomerFiscalEntities.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/fiscal_entities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CustomerFiscalEntitiesRequestToJSON(requestParameters.customerFiscalEntitiesRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CreateCustomerFiscalEntitiesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create Fiscal entity resource that corresponds to a customer ID.
     * Create Fiscal Entity
     */
    createCustomerFiscalEntities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCustomerFiscalEntitiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * Delete Customer
     */
    deleteCustomerByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteCustomerById.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
        });
    }
    /**
     * Deleted a customer resource that corresponds to a customer ID.
     * Delete Customer
     */
    deleteCustomerById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCustomerByIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * Get Customer
     */
    getCustomerByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getCustomerById.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
        });
    }
    /**
     * Gets a customer resource that corresponds to a customer ID.
     * Get Customer
     */
    getCustomerById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomerByIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * Get a list of customers
     */
    getCustomersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.next !== undefined) {
                queryParameters['next'] = requestParameters.next;
            }
            if (requestParameters.previous !== undefined) {
                queryParameters['previous'] = requestParameters.previous;
            }
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CustomersResponseFromJSON(jsonValue));
        });
    }
    /**
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     * Get a list of customers
     */
    getCustomers(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can update customer-related data
     * Update customer
     */
    updateCustomerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateCustomer.');
            }
            if (requestParameters.updateCustomer === null || requestParameters.updateCustomer === undefined) {
                throw new runtime.RequiredError('updateCustomer', 'Required parameter requestParameters.updateCustomer was null or undefined when calling updateCustomer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateCustomerToJSON(requestParameters.updateCustomer),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
        });
    }
    /**
     * You can update customer-related data
     * Update customer
     */
    updateCustomer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCustomerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * Update  Fiscal Entity
     */
    updateCustomerFiscalEntitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateCustomerFiscalEntities.');
            }
            if (requestParameters.fiscalEntitiesId === null || requestParameters.fiscalEntitiesId === undefined) {
                throw new runtime.RequiredError('fiscalEntitiesId', 'Required parameter requestParameters.fiscalEntitiesId was null or undefined when calling updateCustomerFiscalEntities.');
            }
            if (requestParameters.customerUpdateFiscalEntitiesRequest === null || requestParameters.customerUpdateFiscalEntitiesRequest === undefined) {
                throw new runtime.RequiredError('customerUpdateFiscalEntitiesRequest', 'Required parameter requestParameters.customerUpdateFiscalEntitiesRequest was null or undefined when calling updateCustomerFiscalEntities.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/customers/{id}/fiscal_entities/{fiscal_entities_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fiscal_entities_id"}}`, encodeURIComponent(String(requestParameters.fiscalEntitiesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: CustomerUpdateFiscalEntitiesRequestToJSON(requestParameters.customerUpdateFiscalEntitiesRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCustomerFiscalEntitiesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Update Fiscal Entity resource that corresponds to a customer ID.
     * Update  Fiscal Entity
     */
    updateCustomerFiscalEntities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCustomerFiscalEntitiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const CreateCustomerAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const CreateCustomerFiscalEntitiesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const DeleteCustomerByIdAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const GetCustomerByIdAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const GetCustomersAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const UpdateCustomerAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const UpdateCustomerFiscalEntitiesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
