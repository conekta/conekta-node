/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ShippingOrderResponseFromJSON, ShippingRequestToJSON, } from '../models';
/**
 *
 */
export class ShippingsApi extends runtime.BaseAPI {
    /**
     * Create new shipping for an existing orden
     * Create Shipping
     */
    ordersCreateShippingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersCreateShipping.');
            }
            if (requestParameters.shippingRequest === null || requestParameters.shippingRequest === undefined) {
                throw new runtime.RequiredError('shippingRequest', 'Required parameter requestParameters.shippingRequest was null or undefined when calling ordersCreateShipping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/shipping_lines`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ShippingRequestToJSON(requestParameters.shippingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ShippingOrderResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create new shipping for an existing orden
     * Create Shipping
     */
    ordersCreateShipping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ordersCreateShippingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete shipping
     * Delete Shipping
     */
    ordersDeleteShippingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersDeleteShipping.');
            }
            if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
                throw new runtime.RequiredError('shippingId', 'Required parameter requestParameters.shippingId was null or undefined when calling ordersDeleteShipping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/shipping_lines/{shipping_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"shipping_id"}}`, encodeURIComponent(String(requestParameters.shippingId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ShippingOrderResponseFromJSON(jsonValue));
        });
    }
    /**
     * Delete shipping
     * Delete Shipping
     */
    ordersDeleteShipping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ordersDeleteShippingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update existing shipping for an existing orden
     * Update Shipping
     */
    ordersUpdateShippingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersUpdateShipping.');
            }
            if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
                throw new runtime.RequiredError('shippingId', 'Required parameter requestParameters.shippingId was null or undefined when calling ordersUpdateShipping.');
            }
            if (requestParameters.shippingRequest === null || requestParameters.shippingRequest === undefined) {
                throw new runtime.RequiredError('shippingRequest', 'Required parameter requestParameters.shippingRequest was null or undefined when calling ordersUpdateShipping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/shipping_lines/{shipping_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"shipping_id"}}`, encodeURIComponent(String(requestParameters.shippingId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ShippingRequestToJSON(requestParameters.shippingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ShippingOrderResponseFromJSON(jsonValue));
        });
    }
    /**
     * Update existing shipping for an existing orden
     * Update Shipping
     */
    ordersUpdateShipping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ordersUpdateShippingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const OrdersCreateShippingAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const OrdersDeleteShippingAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const OrdersUpdateShippingAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
