/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { GetWebhookKeysResponse, WebhookKeyCreateResponse, WebhookKeyDeleteResponse, WebhookKeyRequest, WebhookKeyResponse, WebhookKeyUpdateRequest } from '../models';
export interface CreateWebhookKeyRequest {
    acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum;
    webhookKeyRequest?: WebhookKeyRequest;
}
export interface DeleteWebhookKeyRequest {
    id: string;
    acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum;
}
export interface GetWebhookKeyRequest {
    id: string;
    acceptLanguage?: GetWebhookKeyAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface GetWebhookKeysRequest {
    acceptLanguage?: GetWebhookKeysAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    search?: string;
    next?: string;
    previous?: string;
}
export interface UpdateWebhookKeyRequest {
    id: string;
    acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum;
    webhookKeyUpdateRequest?: WebhookKeyUpdateRequest;
}
/**
 *
 */
export declare class WebhookKeysApi extends runtime.BaseAPI {
    /**
     * Create a webhook key
     * Create Webhook Key
     */
    createWebhookKeyRaw(requestParameters: CreateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyCreateResponse>>;
    /**
     * Create a webhook key
     * Create Webhook Key
     */
    createWebhookKey(requestParameters?: CreateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyCreateResponse>;
    /**
     * Delete Webhook key
     */
    deleteWebhookKeyRaw(requestParameters: DeleteWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyDeleteResponse>>;
    /**
     * Delete Webhook key
     */
    deleteWebhookKey(requestParameters: DeleteWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyDeleteResponse>;
    /**
     * Get Webhook Key
     */
    getWebhookKeyRaw(requestParameters: GetWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyResponse>>;
    /**
     * Get Webhook Key
     */
    getWebhookKey(requestParameters: GetWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyResponse>;
    /**
     * Consume the list of webhook keys you have
     * Get List of Webhook Keys
     */
    getWebhookKeysRaw(requestParameters: GetWebhookKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhookKeysResponse>>;
    /**
     * Consume the list of webhook keys you have
     * Get List of Webhook Keys
     */
    getWebhookKeys(requestParameters?: GetWebhookKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhookKeysResponse>;
    /**
     * updates an existing webhook key
     * Update Webhook Key
     */
    updateWebhookKeyRaw(requestParameters: UpdateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyResponse>>;
    /**
     * updates an existing webhook key
     * Update Webhook Key
     */
    updateWebhookKey(requestParameters: UpdateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyResponse>;
}
/**
 * @export
 */
export declare const CreateWebhookKeyAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type CreateWebhookKeyAcceptLanguageEnum = typeof CreateWebhookKeyAcceptLanguageEnum[keyof typeof CreateWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export declare const DeleteWebhookKeyAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type DeleteWebhookKeyAcceptLanguageEnum = typeof DeleteWebhookKeyAcceptLanguageEnum[keyof typeof DeleteWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetWebhookKeyAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetWebhookKeyAcceptLanguageEnum = typeof GetWebhookKeyAcceptLanguageEnum[keyof typeof GetWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetWebhookKeysAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetWebhookKeysAcceptLanguageEnum = typeof GetWebhookKeysAcceptLanguageEnum[keyof typeof GetWebhookKeysAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateWebhookKeyAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type UpdateWebhookKeyAcceptLanguageEnum = typeof UpdateWebhookKeyAcceptLanguageEnum[keyof typeof UpdateWebhookKeyAcceptLanguageEnum];
