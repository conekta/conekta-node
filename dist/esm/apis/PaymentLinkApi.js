/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CheckoutToJSON, CheckoutResponseFromJSON, CheckoutsResponseFromJSON, EmailCheckoutRequestToJSON, SmsCheckoutRequestToJSON, } from '../models';
/**
 *
 */
export class PaymentLinkApi extends runtime.BaseAPI {
    /**
     * Cancel Payment Link
     */
    cancelCheckoutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancelCheckout.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/checkouts/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
        });
    }
    /**
     * Cancel Payment Link
     */
    cancelCheckout(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelCheckoutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Unique Payment Link
     */
    createCheckoutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.checkout === null || requestParameters.checkout === undefined) {
                throw new runtime.RequiredError('checkout', 'Required parameter requestParameters.checkout was null or undefined when calling createCheckout.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/checkouts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CheckoutToJSON(requestParameters.checkout),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create Unique Payment Link
     */
    createCheckout(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCheckoutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send an email
     */
    emailCheckoutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling emailCheckout.');
            }
            if (requestParameters.emailCheckoutRequest === null || requestParameters.emailCheckoutRequest === undefined) {
                throw new runtime.RequiredError('emailCheckoutRequest', 'Required parameter requestParameters.emailCheckoutRequest was null or undefined when calling emailCheckout.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/checkouts/{id}/email`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: EmailCheckoutRequestToJSON(requestParameters.emailCheckoutRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
        });
    }
    /**
     * Send an email
     */
    emailCheckout(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.emailCheckoutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a payment link by ID
     */
    getCheckoutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getCheckout.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/checkouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get a payment link by ID
     */
    getCheckout(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCheckoutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns a list of links generated by the merchant
     * Get a list of payment links
     */
    getCheckoutsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.next !== undefined) {
                queryParameters['next'] = requestParameters.next;
            }
            if (requestParameters.previous !== undefined) {
                queryParameters['previous'] = requestParameters.previous;
            }
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/checkouts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Returns a list of links generated by the merchant
     * Get a list of payment links
     */
    getCheckouts(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCheckoutsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send an sms
     */
    smsCheckoutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling smsCheckout.');
            }
            if (requestParameters.smsCheckoutRequest === null || requestParameters.smsCheckoutRequest === undefined) {
                throw new runtime.RequiredError('smsCheckoutRequest', 'Required parameter requestParameters.smsCheckoutRequest was null or undefined when calling smsCheckout.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/checkouts/{id}/sms`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SmsCheckoutRequestToJSON(requestParameters.smsCheckoutRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
        });
    }
    /**
     * Send an sms
     */
    smsCheckout(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.smsCheckoutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const CancelCheckoutAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const CreateCheckoutAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const EmailCheckoutOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const GetCheckoutAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const GetCheckoutsAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
export const SmsCheckoutOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
