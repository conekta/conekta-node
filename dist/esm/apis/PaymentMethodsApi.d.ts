/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateCustomerPaymentMethodsRequest, CreateCustomerPaymentMethodsResponse, GetPaymentMethodResponse, UpdateCustomerPaymentMethodsResponse, UpdatePaymentMethods } from '../models';
export interface CreateCustomerPaymentMethodsOperationRequest {
    id: string;
    createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest;
    acceptLanguage?: CreateCustomerPaymentMethodsOperationAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface DeleteCustomerPaymentMethodsRequest {
    id: string;
    paymentMethodId: string;
    acceptLanguage?: DeleteCustomerPaymentMethodsAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface GetCustomerPaymentMethodsRequest {
    id: string;
    acceptLanguage?: GetCustomerPaymentMethodsAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    next?: string;
    previous?: string;
    search?: string;
}
export interface UpdateCustomerPaymentMethodsRequest {
    id: string;
    paymentMethodId: string;
    updatePaymentMethods: UpdatePaymentMethods;
    acceptLanguage?: UpdateCustomerPaymentMethodsAcceptLanguageEnum;
    xChildCompanyId?: string;
}
/**
 *
 */
export declare class PaymentMethodsApi extends runtime.BaseAPI {
    /**
     * Create a payment method for a customer.
     * Create Payment Method
     */
    createCustomerPaymentMethodsRaw(requestParameters: CreateCustomerPaymentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomerPaymentMethodsResponse>>;
    /**
     * Create a payment method for a customer.
     * Create Payment Method
     */
    createCustomerPaymentMethods(requestParameters: CreateCustomerPaymentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomerPaymentMethodsResponse>;
    /**
     * Delete an existing payment method
     * Delete Payment Method
     */
    deleteCustomerPaymentMethodsRaw(requestParameters: DeleteCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCustomerPaymentMethodsResponse>>;
    /**
     * Delete an existing payment method
     * Delete Payment Method
     */
    deleteCustomerPaymentMethods(requestParameters: DeleteCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCustomerPaymentMethodsResponse>;
    /**
     * Get a list of Payment Methods
     * Get Payment Methods
     */
    getCustomerPaymentMethodsRaw(requestParameters: GetCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaymentMethodResponse>>;
    /**
     * Get a list of Payment Methods
     * Get Payment Methods
     */
    getCustomerPaymentMethods(requestParameters: GetCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaymentMethodResponse>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * Update Payment Method
     */
    updateCustomerPaymentMethodsRaw(requestParameters: UpdateCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCustomerPaymentMethodsResponse>>;
    /**
     * Gets a payment Method that corresponds to a customer ID.
     * Update Payment Method
     */
    updateCustomerPaymentMethods(requestParameters: UpdateCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCustomerPaymentMethodsResponse>;
}
/**
 * @export
 */
export declare const CreateCustomerPaymentMethodsOperationAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type CreateCustomerPaymentMethodsOperationAcceptLanguageEnum = typeof CreateCustomerPaymentMethodsOperationAcceptLanguageEnum[keyof typeof CreateCustomerPaymentMethodsOperationAcceptLanguageEnum];
/**
 * @export
 */
export declare const DeleteCustomerPaymentMethodsAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type DeleteCustomerPaymentMethodsAcceptLanguageEnum = typeof DeleteCustomerPaymentMethodsAcceptLanguageEnum[keyof typeof DeleteCustomerPaymentMethodsAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetCustomerPaymentMethodsAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetCustomerPaymentMethodsAcceptLanguageEnum = typeof GetCustomerPaymentMethodsAcceptLanguageEnum[keyof typeof GetCustomerPaymentMethodsAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateCustomerPaymentMethodsAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type UpdateCustomerPaymentMethodsAcceptLanguageEnum = typeof UpdateCustomerPaymentMethodsAcceptLanguageEnum[keyof typeof UpdateCustomerPaymentMethodsAcceptLanguageEnum];
