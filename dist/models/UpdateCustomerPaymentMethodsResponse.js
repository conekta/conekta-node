"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateCustomerPaymentMethodsResponseToJSON = exports.UpdateCustomerPaymentMethodsResponseFromJSONTyped = exports.UpdateCustomerPaymentMethodsResponseFromJSON = void 0;
const PaymentMethodCardResponse_1 = require("./PaymentMethodCardResponse");
const PaymentMethodCashResponse_1 = require("./PaymentMethodCashResponse");
const PaymentMethodSpeiRecurrent_1 = require("./PaymentMethodSpeiRecurrent");
function UpdateCustomerPaymentMethodsResponseFromJSON(json) {
    return UpdateCustomerPaymentMethodsResponseFromJSONTyped(json, false);
}
exports.UpdateCustomerPaymentMethodsResponseFromJSON = UpdateCustomerPaymentMethodsResponseFromJSON;
function UpdateCustomerPaymentMethodsResponseFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'card':
            return Object.assign(Object.assign({}, (0, PaymentMethodCardResponse_1.PaymentMethodCardResponseFromJSONTyped)(json, true)), { type: 'card' });
        case 'cash':
            return Object.assign(Object.assign({}, (0, PaymentMethodCashResponse_1.PaymentMethodCashResponseFromJSONTyped)(json, true)), { type: 'cash' });
        case 'oxxo_recurrent':
            return Object.assign(Object.assign({}, (0, PaymentMethodCashResponse_1.PaymentMethodCashResponseFromJSONTyped)(json, true)), { type: 'oxxo_recurrent' });
        case 'spei_recurrent':
            return Object.assign(Object.assign({}, (0, PaymentMethodSpeiRecurrent_1.PaymentMethodSpeiRecurrentFromJSONTyped)(json, true)), { type: 'spei_recurrent' });
        default:
            throw new Error(`No variant of UpdateCustomerPaymentMethodsResponse exists with 'type=${json['type']}'`);
    }
}
exports.UpdateCustomerPaymentMethodsResponseFromJSONTyped = UpdateCustomerPaymentMethodsResponseFromJSONTyped;
function UpdateCustomerPaymentMethodsResponseToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'card':
            return (0, PaymentMethodCardResponse_1.PaymentMethodCardResponseToJSON)(value);
        case 'cash':
            return (0, PaymentMethodCashResponse_1.PaymentMethodCashResponseToJSON)(value);
        case 'oxxo_recurrent':
            return (0, PaymentMethodCashResponse_1.PaymentMethodCashResponseToJSON)(value);
        case 'spei_recurrent':
            return (0, PaymentMethodSpeiRecurrent_1.PaymentMethodSpeiRecurrentToJSON)(value);
        default:
            throw new Error(`No variant of UpdateCustomerPaymentMethodsResponse exists with 'type=${value['type']}'`);
    }
}
exports.UpdateCustomerPaymentMethodsResponseToJSON = UpdateCustomerPaymentMethodsResponseToJSON;
