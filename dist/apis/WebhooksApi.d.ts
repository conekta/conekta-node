/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { GetWebhooksResponse, WebhookRequest, WebhookResponse, WebhookUpdateRequest } from '../models';
export interface CreateWebhookRequest {
    webhookRequest: WebhookRequest;
    acceptLanguage?: CreateWebhookAcceptLanguageEnum;
}
export interface DeleteWebhookRequest {
    id: string;
    acceptLanguage?: DeleteWebhookAcceptLanguageEnum;
}
export interface GetWebhookRequest {
    id: string;
    acceptLanguage?: GetWebhookAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface GetWebhooksRequest {
    acceptLanguage?: GetWebhooksAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    search?: string;
    next?: string;
    previous?: string;
}
export interface UpdateWebhookRequest {
    id: string;
    webhookUpdateRequest: WebhookUpdateRequest;
    acceptLanguage?: UpdateWebhookAcceptLanguageEnum;
    xChildCompanyId?: string;
}
/**
 *
 */
export declare class WebhooksApi extends runtime.BaseAPI {
    /**
     * What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
     * Create Webhook
     */
    createWebhookRaw(requestParameters: CreateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;
    /**
     * What we do at Conekta translates into events. For example, an event of interest to us occurs at the time a payment is successfully processed. At that moment we will be interested in doing several things: Send an email to the buyer, generate an invoice, start the process of shipping the product, etc.
     * Create Webhook
     */
    createWebhook(requestParameters: CreateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;
    /**
     * Delete Webhook
     */
    deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;
    /**
     * Delete Webhook
     */
    deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;
    /**
     * Get Webhook
     */
    getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;
    /**
     * Get Webhook
     */
    getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;
    /**
     * Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
     * Get List of Webhooks
     */
    getWebhooksRaw(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhooksResponse>>;
    /**
     * Consume the list of webhooks you have, each environment supports 10 webhooks (For production and testing)
     * Get List of Webhooks
     */
    getWebhooks(requestParameters?: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhooksResponse>;
    /**
     * updates an existing webhook
     * Update Webhook
     */
    updateWebhookRaw(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;
    /**
     * updates an existing webhook
     * Update Webhook
     */
    updateWebhook(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;
}
/**
 * @export
 */
export declare const CreateWebhookAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type CreateWebhookAcceptLanguageEnum = typeof CreateWebhookAcceptLanguageEnum[keyof typeof CreateWebhookAcceptLanguageEnum];
/**
 * @export
 */
export declare const DeleteWebhookAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type DeleteWebhookAcceptLanguageEnum = typeof DeleteWebhookAcceptLanguageEnum[keyof typeof DeleteWebhookAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetWebhookAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetWebhookAcceptLanguageEnum = typeof GetWebhookAcceptLanguageEnum[keyof typeof GetWebhookAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetWebhooksAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetWebhooksAcceptLanguageEnum = typeof GetWebhooksAcceptLanguageEnum[keyof typeof GetWebhooksAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateWebhookAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type UpdateWebhookAcceptLanguageEnum = typeof UpdateWebhookAcceptLanguageEnum[keyof typeof UpdateWebhookAcceptLanguageEnum];
