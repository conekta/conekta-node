"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateOrderAcceptLanguageEnum = exports.OrdersCreateCaptureAcceptLanguageEnum = exports.OrderRefundOperationAcceptLanguageEnum = exports.OrderCancelRefundAcceptLanguageEnum = exports.GetOrdersAcceptLanguageEnum = exports.GetOrderByIdAcceptLanguageEnum = exports.CreateOrderAcceptLanguageEnum = exports.CancelOrderAcceptLanguageEnum = exports.OrdersApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class OrdersApi extends runtime.BaseAPI {
    /**
     * Cancel an order that has been previously created.
     * Cancel Order
     */
    cancelOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancelOrder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Cancel an order that has been previously created.
     * Cancel Order
     */
    cancelOrder(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cancelOrderRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new order.
     * Create order
     */
    createOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.orderRequest === null || requestParameters.orderRequest === undefined) {
                throw new runtime.RequiredError('orderRequest', 'Required parameter requestParameters.orderRequest was null or undefined when calling createOrder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.OrderRequestToJSON)(requestParameters.orderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new order.
     * Create order
     */
    createOrder(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createOrderRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Info for a specific order
     * Get Order
     */
    getOrderByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOrderById.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Info for a specific order
     * Get Order
     */
    getOrderById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrderByIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get order details in the form of a list
     * Get a list of Orders
     */
    getOrdersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.next !== undefined) {
                queryParameters['next'] = requestParameters.next;
            }
            if (requestParameters.previous !== undefined) {
                queryParameters['previous'] = requestParameters.previous;
            }
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GetOrdersResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get order details in the form of a list
     * Get a list of Orders
     */
    getOrders(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrdersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Cancel Refund
     */
    orderCancelRefundRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling orderCancelRefund.');
            }
            if (requestParameters.refundId === null || requestParameters.refundId === undefined) {
                throw new runtime.RequiredError('refundId', 'Required parameter requestParameters.refundId was null or undefined when calling orderCancelRefund.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/refunds/{refund_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"refund_id"}}`, encodeURIComponent(String(requestParameters.refundId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Cancel Refund
     */
    orderCancelRefund(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.orderCancelRefundRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Refund Order
     */
    orderRefundRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling orderRefund.');
            }
            if (requestParameters.orderRefundRequest === null || requestParameters.orderRefundRequest === undefined) {
                throw new runtime.RequiredError('orderRefundRequest', 'Required parameter requestParameters.orderRefundRequest was null or undefined when calling orderRefund.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/refunds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.OrderRefundRequestToJSON)(requestParameters.orderRefundRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Refund Order
     */
    orderRefund(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.orderRefundRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Processes an order that has been previously authorized.
     * Capture Order
     */
    ordersCreateCaptureRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling ordersCreateCapture.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
                headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}/capture`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.OrderCaptureRequestToJSON)(requestParameters.orderCaptureRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Processes an order that has been previously authorized.
     * Capture Order
     */
    ordersCreateCapture(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ordersCreateCaptureRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an existing Order.
     * Update Order
     */
    updateOrderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateOrder.');
            }
            if (requestParameters.orderUpdateRequest === null || requestParameters.orderUpdateRequest === undefined) {
                throw new runtime.RequiredError('orderUpdateRequest', 'Required parameter requestParameters.orderUpdateRequest was null or undefined when calling updateOrder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.OrderUpdateRequestToJSON)(requestParameters.orderUpdateRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OrderResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Update an existing Order.
     * Update Order
     */
    updateOrder(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateOrderRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.OrdersApi = OrdersApi;
/**
 * @export
 */
exports.CancelOrderAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.CreateOrderAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.GetOrderByIdAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.GetOrdersAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.OrderCancelRefundAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.OrderRefundOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.OrdersCreateCaptureAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
/**
 * @export
 */
exports.UpdateOrderAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
};
