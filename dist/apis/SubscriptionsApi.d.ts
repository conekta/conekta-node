/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { SubscriptionEventsResponse, SubscriptionRequest, SubscriptionResponse, SubscriptionUpdateRequest } from '../models';
export interface CancelSubscriptionRequest {
    id: string;
    acceptLanguage?: CancelSubscriptionAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface CreateSubscriptionRequest {
    id: string;
    subscriptionRequest: SubscriptionRequest;
    acceptLanguage?: CreateSubscriptionAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface GetAllEventsFromSubscriptionRequest {
    id: string;
    acceptLanguage?: GetAllEventsFromSubscriptionAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface GetSubscriptionRequest {
    id: string;
    acceptLanguage?: GetSubscriptionAcceptLanguageEnum;
}
export interface PauseSubscriptionRequest {
    id: string;
    acceptLanguage?: PauseSubscriptionAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface ResumeSubscriptionRequest {
    id: string;
    acceptLanguage?: ResumeSubscriptionAcceptLanguageEnum;
    xChildCompanyId?: string;
}
export interface UpdateSubscriptionRequest {
    id: string;
    subscriptionUpdateRequest: SubscriptionUpdateRequest;
    acceptLanguage?: UpdateSubscriptionAcceptLanguageEnum;
    xChildCompanyId?: string;
}
/**
 *
 */
export declare class SubscriptionsApi extends runtime.BaseAPI {
    /**
     * You can cancel the subscription to stop the plans that your customers consume
     * Cancel Subscription
     */
    cancelSubscriptionRaw(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>>;
    /**
     * You can cancel the subscription to stop the plans that your customers consume
     * Cancel Subscription
     */
    cancelSubscription(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse>;
    /**
     * You can create the subscription to include the plans that your customers consume
     * Create Subscription
     */
    createSubscriptionRaw(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>>;
    /**
     * You can create the subscription to include the plans that your customers consume
     * Create Subscription
     */
    createSubscription(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse>;
    /**
     * You can get the events of the subscription(s) of a client, with the customer id
     * Get Events By Subscription
     */
    getAllEventsFromSubscriptionRaw(requestParameters: GetAllEventsFromSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionEventsResponse>>;
    /**
     * You can get the events of the subscription(s) of a client, with the customer id
     * Get Events By Subscription
     */
    getAllEventsFromSubscription(requestParameters: GetAllEventsFromSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionEventsResponse>;
    /**
     * Get Subscription
     */
    getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>>;
    /**
     * Get Subscription
     */
    getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse>;
    /**
     * You can pause the subscription to stop the plans that your customers consume
     * Pause Subscription
     */
    pauseSubscriptionRaw(requestParameters: PauseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>>;
    /**
     * You can pause the subscription to stop the plans that your customers consume
     * Pause Subscription
     */
    pauseSubscription(requestParameters: PauseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse>;
    /**
     * You can resume the subscription to start the plans that your customers consume
     * Resume Subscription
     */
    resumeSubscriptionRaw(requestParameters: ResumeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>>;
    /**
     * You can resume the subscription to start the plans that your customers consume
     * Resume Subscription
     */
    resumeSubscription(requestParameters: ResumeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse>;
    /**
     * You can modify the subscription to change the plans that your customers consume
     * Update Subscription
     */
    updateSubscriptionRaw(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionResponse>>;
    /**
     * You can modify the subscription to change the plans that your customers consume
     * Update Subscription
     */
    updateSubscription(requestParameters: UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionResponse>;
}
/**
 * @export
 */
export declare const CancelSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type CancelSubscriptionAcceptLanguageEnum = typeof CancelSubscriptionAcceptLanguageEnum[keyof typeof CancelSubscriptionAcceptLanguageEnum];
/**
 * @export
 */
export declare const CreateSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type CreateSubscriptionAcceptLanguageEnum = typeof CreateSubscriptionAcceptLanguageEnum[keyof typeof CreateSubscriptionAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetAllEventsFromSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetAllEventsFromSubscriptionAcceptLanguageEnum = typeof GetAllEventsFromSubscriptionAcceptLanguageEnum[keyof typeof GetAllEventsFromSubscriptionAcceptLanguageEnum];
/**
 * @export
 */
export declare const GetSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type GetSubscriptionAcceptLanguageEnum = typeof GetSubscriptionAcceptLanguageEnum[keyof typeof GetSubscriptionAcceptLanguageEnum];
/**
 * @export
 */
export declare const PauseSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type PauseSubscriptionAcceptLanguageEnum = typeof PauseSubscriptionAcceptLanguageEnum[keyof typeof PauseSubscriptionAcceptLanguageEnum];
/**
 * @export
 */
export declare const ResumeSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type ResumeSubscriptionAcceptLanguageEnum = typeof ResumeSubscriptionAcceptLanguageEnum[keyof typeof ResumeSubscriptionAcceptLanguageEnum];
/**
 * @export
 */
export declare const UpdateSubscriptionAcceptLanguageEnum: {
    readonly Es: "es";
    readonly En: "en";
};
export type UpdateSubscriptionAcceptLanguageEnum = typeof UpdateSubscriptionAcceptLanguageEnum[keyof typeof UpdateSubscriptionAcceptLanguageEnum];
