/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ModelError } from '../model';
// @ts-ignore
import { PayoutOrder } from '../model';
// @ts-ignore
import { PayoutOrderResponse } from '../model';
// @ts-ignore
import { PayoutOrdersResponse } from '../model';
/**
 * PayoutOrdersApi - axios parameter creator
 * @export
 */
export const PayoutOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new payout order.
         * @summary Create payout order
         * @param {PayoutOrder} payoutOrder requested field for payout order
         * @param {CreatePayoutOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayoutOrder: async (payoutOrder: PayoutOrder, acceptLanguage?: CreatePayoutOrderAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutOrder' is not null or undefined
            assertParamExists('createPayoutOrder', 'payoutOrder', payoutOrder)
            const localVarPath = `/payout_orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payoutOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a payout Order resource that corresponds to a payout order ID.
         * @summary Get Payout Order
         * @param {string} id Identifier of the resource
         * @param {GetPayoutOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutOrderById: async (id: string, acceptLanguage?: GetPayoutOrderByIdAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPayoutOrderById', 'id', id)
            const localVarPath = `/payout_orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Payout order details in the form of a list
         * @summary Get a list of Payout Orders
         * @param {GetPayoutOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutOrders: async (acceptLanguage?: GetPayoutOrdersAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payout_orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }

            if (previous !== undefined) {
                localVarQueryParameter['previous'] = previous;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayoutOrdersApi - functional programming interface
 * @export
 */
export const PayoutOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayoutOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new payout order.
         * @summary Create payout order
         * @param {PayoutOrder} payoutOrder requested field for payout order
         * @param {CreatePayoutOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayoutOrder(payoutOrder: PayoutOrder, acceptLanguage?: CreatePayoutOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayoutOrder(payoutOrder, acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PayoutOrdersApi.createPayoutOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Gets a payout Order resource that corresponds to a payout order ID.
         * @summary Get Payout Order
         * @param {string} id Identifier of the resource
         * @param {GetPayoutOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayoutOrderById(id: string, acceptLanguage?: GetPayoutOrderByIdAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayoutOrderById(id, acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PayoutOrdersApi.getPayoutOrderById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Payout order details in the form of a list
         * @summary Get a list of Payout Orders
         * @param {GetPayoutOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayoutOrders(acceptLanguage?: GetPayoutOrdersAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayoutOrders(acceptLanguage, limit, search, next, previous, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PayoutOrdersApi.getPayoutOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PayoutOrdersApi - factory interface
 * @export
 */
export const PayoutOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayoutOrdersApiFp(configuration)
    return {
        /**
         * Create a new payout order.
         * @summary Create payout order
         * @param {PayoutOrder} payoutOrder requested field for payout order
         * @param {CreatePayoutOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayoutOrder(payoutOrder: PayoutOrder, acceptLanguage?: CreatePayoutOrderAcceptLanguageEnum, options?: any): AxiosPromise<PayoutOrderResponse> {
            return localVarFp.createPayoutOrder(payoutOrder, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a payout Order resource that corresponds to a payout order ID.
         * @summary Get Payout Order
         * @param {string} id Identifier of the resource
         * @param {GetPayoutOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutOrderById(id: string, acceptLanguage?: GetPayoutOrderByIdAcceptLanguageEnum, options?: any): AxiosPromise<PayoutOrderResponse> {
            return localVarFp.getPayoutOrderById(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Payout order details in the form of a list
         * @summary Get a list of Payout Orders
         * @param {GetPayoutOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutOrders(acceptLanguage?: GetPayoutOrdersAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<PayoutOrdersResponse> {
            return localVarFp.getPayoutOrders(acceptLanguage, limit, search, next, previous, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayoutOrdersApi - interface
 * @export
 * @interface PayoutOrdersApi
 */
export interface PayoutOrdersApiInterface {
    /**
     * Create a new payout order.
     * @summary Create payout order
     * @param {PayoutOrder} payoutOrder requested field for payout order
     * @param {CreatePayoutOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutOrdersApiInterface
     */
    createPayoutOrder(payoutOrder: PayoutOrder, acceptLanguage?: CreatePayoutOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<PayoutOrderResponse>;

    /**
     * Gets a payout Order resource that corresponds to a payout order ID.
     * @summary Get Payout Order
     * @param {string} id Identifier of the resource
     * @param {GetPayoutOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutOrdersApiInterface
     */
    getPayoutOrderById(id: string, acceptLanguage?: GetPayoutOrderByIdAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<PayoutOrderResponse>;

    /**
     * Get Payout order details in the form of a list
     * @summary Get a list of Payout Orders
     * @param {GetPayoutOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutOrdersApiInterface
     */
    getPayoutOrders(acceptLanguage?: GetPayoutOrdersAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): AxiosPromise<PayoutOrdersResponse>;

}

/**
 * PayoutOrdersApi - object-oriented interface
 * @export
 * @class PayoutOrdersApi
 * @extends {BaseAPI}
 */
export class PayoutOrdersApi extends BaseAPI implements PayoutOrdersApiInterface {
    /**
     * Create a new payout order.
     * @summary Create payout order
     * @param {PayoutOrder} payoutOrder requested field for payout order
     * @param {CreatePayoutOrderAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutOrdersApi
     */
    public createPayoutOrder(payoutOrder: PayoutOrder, acceptLanguage?: CreatePayoutOrderAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return PayoutOrdersApiFp(this.configuration).createPayoutOrder(payoutOrder, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a payout Order resource that corresponds to a payout order ID.
     * @summary Get Payout Order
     * @param {string} id Identifier of the resource
     * @param {GetPayoutOrderByIdAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutOrdersApi
     */
    public getPayoutOrderById(id: string, acceptLanguage?: GetPayoutOrderByIdAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return PayoutOrdersApiFp(this.configuration).getPayoutOrderById(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Payout order details in the form of a list
     * @summary Get a list of Payout Orders
     * @param {GetPayoutOrdersAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutOrdersApi
     */
    public getPayoutOrders(acceptLanguage?: GetPayoutOrdersAcceptLanguageEnum, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig) {
        return PayoutOrdersApiFp(this.configuration).getPayoutOrders(acceptLanguage, limit, search, next, previous, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreatePayoutOrderAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type CreatePayoutOrderAcceptLanguageEnum = typeof CreatePayoutOrderAcceptLanguageEnum[keyof typeof CreatePayoutOrderAcceptLanguageEnum];
/**
 * @export
 */
export const GetPayoutOrderByIdAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type GetPayoutOrderByIdAcceptLanguageEnum = typeof GetPayoutOrderByIdAcceptLanguageEnum[keyof typeof GetPayoutOrderByIdAcceptLanguageEnum];
/**
 * @export
 */
export const GetPayoutOrdersAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type GetPayoutOrdersAcceptLanguageEnum = typeof GetPayoutOrdersAcceptLanguageEnum[keyof typeof GetPayoutOrdersAcceptLanguageEnum];
