/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { BlacklistRuleResponse } from '../model';
// @ts-ignore
import { CreateRiskRulesData } from '../model';
// @ts-ignore
import { DeletedBlacklistRuleResponse } from '../model';
// @ts-ignore
import { DeletedWhitelistRuleResponse } from '../model';
// @ts-ignore
import { ModelError } from '../model';
// @ts-ignore
import { RiskRulesList } from '../model';
// @ts-ignore
import { WhitelistlistRuleResponse } from '../model';
/**
 * AntifraudApi - axios parameter creator
 * @export
 */
export const AntifraudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create blacklisted rule
         * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
         * @param {CreateRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleBlacklist: async (createRiskRulesData: CreateRiskRulesData, acceptLanguage?: CreateRuleBlacklistAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRiskRulesData' is not null or undefined
            assertParamExists('createRuleBlacklist', 'createRiskRulesData', createRiskRulesData)
            const localVarPath = `/antifraud/blacklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRiskRulesData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create whitelisted rule
         * @param {CreateRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {CreateRiskRulesData} [createRiskRulesData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleWhitelist: async (acceptLanguage?: CreateRuleWhitelistAcceptLanguageEnum, createRiskRulesData?: CreateRiskRulesData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/antifraud/whitelists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRiskRulesData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete blacklisted rule
         * @param {string} id Identifier of the resource
         * @param {DeleteRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleBlacklist: async (id: string, acceptLanguage?: DeleteRuleBlacklistAcceptLanguageEnum, xChildCompanyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRuleBlacklist', 'id', id)
            const localVarPath = `/antifraud/blacklists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete whitelisted rule
         * @param {string} id Identifier of the resource
         * @param {DeleteRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleWhitelist: async (id: string, acceptLanguage?: DeleteRuleWhitelistAcceptLanguageEnum, xChildCompanyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRuleWhitelist', 'id', id)
            const localVarPath = `/antifraud/whitelists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all rules
         * @summary Get list of blacklisted rules
         * @param {GetRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBlacklist: async (acceptLanguage?: GetRuleBlacklistAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/antifraud/blacklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all rules
         * @summary Get a list of whitelisted rules
         * @param {GetRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleWhitelist: async (acceptLanguage?: GetRuleWhitelistAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/antifraud/whitelists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AntifraudApi - functional programming interface
 * @export
 */
export const AntifraudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AntifraudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create blacklisted rule
         * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
         * @param {CreateRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: CreateRuleBlacklistAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlacklistRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRuleBlacklist(createRiskRulesData, acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AntifraudApi.createRuleBlacklist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create whitelisted rule
         * @param {CreateRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {CreateRiskRulesData} [createRiskRulesData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRuleWhitelist(acceptLanguage?: CreateRuleWhitelistAcceptLanguageEnum, createRiskRulesData?: CreateRiskRulesData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhitelistlistRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRuleWhitelist(acceptLanguage, createRiskRulesData, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AntifraudApi.createRuleWhitelist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete blacklisted rule
         * @param {string} id Identifier of the resource
         * @param {DeleteRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRuleBlacklist(id: string, acceptLanguage?: DeleteRuleBlacklistAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedBlacklistRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AntifraudApi.deleteRuleBlacklist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete whitelisted rule
         * @param {string} id Identifier of the resource
         * @param {DeleteRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRuleWhitelist(id: string, acceptLanguage?: DeleteRuleWhitelistAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedWhitelistRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AntifraudApi.deleteRuleWhitelist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return all rules
         * @summary Get list of blacklisted rules
         * @param {GetRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuleBlacklist(acceptLanguage?: GetRuleBlacklistAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskRulesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuleBlacklist(acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AntifraudApi.getRuleBlacklist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return all rules
         * @summary Get a list of whitelisted rules
         * @param {GetRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuleWhitelist(acceptLanguage?: GetRuleWhitelistAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskRulesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuleWhitelist(acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AntifraudApi.getRuleWhitelist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AntifraudApi - factory interface
 * @export
 */
export const AntifraudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AntifraudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create blacklisted rule
         * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
         * @param {CreateRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: CreateRuleBlacklistAcceptLanguageEnum, options?: any): AxiosPromise<BlacklistRuleResponse> {
            return localVarFp.createRuleBlacklist(createRiskRulesData, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create whitelisted rule
         * @param {CreateRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {CreateRiskRulesData} [createRiskRulesData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRuleWhitelist(acceptLanguage?: CreateRuleWhitelistAcceptLanguageEnum, createRiskRulesData?: CreateRiskRulesData, options?: any): AxiosPromise<WhitelistlistRuleResponse> {
            return localVarFp.createRuleWhitelist(acceptLanguage, createRiskRulesData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete blacklisted rule
         * @param {string} id Identifier of the resource
         * @param {DeleteRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleBlacklist(id: string, acceptLanguage?: DeleteRuleBlacklistAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<DeletedBlacklistRuleResponse> {
            return localVarFp.deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete whitelisted rule
         * @param {string} id Identifier of the resource
         * @param {DeleteRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleWhitelist(id: string, acceptLanguage?: DeleteRuleWhitelistAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<DeletedWhitelistRuleResponse> {
            return localVarFp.deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all rules
         * @summary Get list of blacklisted rules
         * @param {GetRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBlacklist(acceptLanguage?: GetRuleBlacklistAcceptLanguageEnum, options?: any): AxiosPromise<RiskRulesList> {
            return localVarFp.getRuleBlacklist(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all rules
         * @summary Get a list of whitelisted rules
         * @param {GetRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleWhitelist(acceptLanguage?: GetRuleWhitelistAcceptLanguageEnum, options?: any): AxiosPromise<RiskRulesList> {
            return localVarFp.getRuleWhitelist(acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AntifraudApi - interface
 * @export
 * @interface AntifraudApi
 */
export interface AntifraudApiInterface {
    /**
     * 
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {CreateRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: CreateRuleBlacklistAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<BlacklistRuleResponse>;

    /**
     * 
     * @summary Create whitelisted rule
     * @param {CreateRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    createRuleWhitelist(acceptLanguage?: CreateRuleWhitelistAcceptLanguageEnum, createRiskRulesData?: CreateRiskRulesData, options?: RawAxiosRequestConfig): AxiosPromise<WhitelistlistRuleResponse>;

    /**
     * 
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {DeleteRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    deleteRuleBlacklist(id: string, acceptLanguage?: DeleteRuleBlacklistAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeletedBlacklistRuleResponse>;

    /**
     * 
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {DeleteRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    deleteRuleWhitelist(id: string, acceptLanguage?: DeleteRuleWhitelistAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeletedWhitelistRuleResponse>;

    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {GetRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    getRuleBlacklist(acceptLanguage?: GetRuleBlacklistAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<RiskRulesList>;

    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {GetRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApiInterface
     */
    getRuleWhitelist(acceptLanguage?: GetRuleWhitelistAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<RiskRulesList>;

}

/**
 * AntifraudApi - object-oriented interface
 * @export
 * @class AntifraudApi
 * @extends {BaseAPI}
 */
export class AntifraudApi extends BaseAPI implements AntifraudApiInterface {
    /**
     * 
     * @summary Create blacklisted rule
     * @param {CreateRiskRulesData} createRiskRulesData requested field for blacklist rule
     * @param {CreateRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    public createRuleBlacklist(createRiskRulesData: CreateRiskRulesData, acceptLanguage?: CreateRuleBlacklistAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return AntifraudApiFp(this.configuration).createRuleBlacklist(createRiskRulesData, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create whitelisted rule
     * @param {CreateRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {CreateRiskRulesData} [createRiskRulesData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    public createRuleWhitelist(acceptLanguage?: CreateRuleWhitelistAcceptLanguageEnum, createRiskRulesData?: CreateRiskRulesData, options?: RawAxiosRequestConfig) {
        return AntifraudApiFp(this.configuration).createRuleWhitelist(acceptLanguage, createRiskRulesData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete blacklisted rule
     * @param {string} id Identifier of the resource
     * @param {DeleteRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    public deleteRuleBlacklist(id: string, acceptLanguage?: DeleteRuleBlacklistAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) {
        return AntifraudApiFp(this.configuration).deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete whitelisted rule
     * @param {string} id Identifier of the resource
     * @param {DeleteRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    public deleteRuleWhitelist(id: string, acceptLanguage?: DeleteRuleWhitelistAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) {
        return AntifraudApiFp(this.configuration).deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all rules
     * @summary Get list of blacklisted rules
     * @param {GetRuleBlacklistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    public getRuleBlacklist(acceptLanguage?: GetRuleBlacklistAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return AntifraudApiFp(this.configuration).getRuleBlacklist(acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all rules
     * @summary Get a list of whitelisted rules
     * @param {GetRuleWhitelistAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AntifraudApi
     */
    public getRuleWhitelist(acceptLanguage?: GetRuleWhitelistAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return AntifraudApiFp(this.configuration).getRuleWhitelist(acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreateRuleBlacklistAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type CreateRuleBlacklistAcceptLanguageEnum = typeof CreateRuleBlacklistAcceptLanguageEnum[keyof typeof CreateRuleBlacklistAcceptLanguageEnum];
/**
 * @export
 */
export const CreateRuleWhitelistAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type CreateRuleWhitelistAcceptLanguageEnum = typeof CreateRuleWhitelistAcceptLanguageEnum[keyof typeof CreateRuleWhitelistAcceptLanguageEnum];
/**
 * @export
 */
export const DeleteRuleBlacklistAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type DeleteRuleBlacklistAcceptLanguageEnum = typeof DeleteRuleBlacklistAcceptLanguageEnum[keyof typeof DeleteRuleBlacklistAcceptLanguageEnum];
/**
 * @export
 */
export const DeleteRuleWhitelistAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type DeleteRuleWhitelistAcceptLanguageEnum = typeof DeleteRuleWhitelistAcceptLanguageEnum[keyof typeof DeleteRuleWhitelistAcceptLanguageEnum];
/**
 * @export
 */
export const GetRuleBlacklistAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type GetRuleBlacklistAcceptLanguageEnum = typeof GetRuleBlacklistAcceptLanguageEnum[keyof typeof GetRuleBlacklistAcceptLanguageEnum];
/**
 * @export
 */
export const GetRuleWhitelistAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type GetRuleWhitelistAcceptLanguageEnum = typeof GetRuleWhitelistAcceptLanguageEnum[keyof typeof GetRuleWhitelistAcceptLanguageEnum];
