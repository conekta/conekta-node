/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GetWebhookKeysResponse } from '../model';
// @ts-ignore
import { ModelError } from '../model';
// @ts-ignore
import { WebhookKeyCreateResponse } from '../model';
// @ts-ignore
import { WebhookKeyDeleteResponse } from '../model';
// @ts-ignore
import { WebhookKeyRequest } from '../model';
// @ts-ignore
import { WebhookKeyResponse } from '../model';
// @ts-ignore
import { WebhookKeyUpdateRequest } from '../model';
/**
 * WebhookKeysApi - axios parameter creator
 * @export
 */
export const WebhookKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a webhook key
         * @summary Create Webhook Key
         * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyRequest} [webhookKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookKey: async (acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum, webhookKeyRequest?: WebhookKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhook_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Webhook key
         * @param {string} id Identifier of the resource
         * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookKey: async (id: string, acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWebhookKey', 'id', id)
            const localVarPath = `/webhook_keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Webhook Key
         * @param {string} id Identifier of the resource
         * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKey: async (id: string, acceptLanguage?: GetWebhookKeyAcceptLanguageEnum, xChildCompanyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWebhookKey', 'id', id)
            const localVarPath = `/webhook_keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Consume the list of webhook keys you have
         * @summary Get List of Webhook Keys
         * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKeys: async (acceptLanguage?: GetWebhookKeysAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhook_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }

            if (previous !== undefined) {
                localVarQueryParameter['previous'] = previous;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }

            if (xChildCompanyId != null) {
                localVarHeaderParameter['X-Child-Company-Id'] = String(xChildCompanyId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates an existing webhook key
         * @summary Update Webhook Key
         * @param {string} id Identifier of the resource
         * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookKey: async (id: string, acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum, webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWebhookKey', 'id', id)
            const localVarPath = `/webhook_keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookKeyUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookKeysApi - functional programming interface
 * @export
 */
export const WebhookKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a webhook key
         * @summary Create Webhook Key
         * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyRequest} [webhookKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhookKey(acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum, webhookKeyRequest?: WebhookKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhookKey(acceptLanguage, webhookKeyRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WebhookKeysApi.createWebhookKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Webhook key
         * @param {string} id Identifier of the resource
         * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhookKey(id: string, acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhookKey(id, acceptLanguage, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WebhookKeysApi.deleteWebhookKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Webhook Key
         * @param {string} id Identifier of the resource
         * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookKey(id: string, acceptLanguage?: GetWebhookKeyAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookKey(id, acceptLanguage, xChildCompanyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WebhookKeysApi.getWebhookKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Consume the list of webhook keys you have
         * @summary Get List of Webhook Keys
         * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookKeys(acceptLanguage?: GetWebhookKeysAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWebhookKeysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WebhookKeysApi.getWebhookKeys']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * updates an existing webhook key
         * @summary Update Webhook Key
         * @param {string} id Identifier of the resource
         * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhookKey(id: string, acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum, webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WebhookKeysApi.updateWebhookKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WebhookKeysApi - factory interface
 * @export
 */
export const WebhookKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookKeysApiFp(configuration)
    return {
        /**
         * Create a webhook key
         * @summary Create Webhook Key
         * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyRequest} [webhookKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookKey(acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum, webhookKeyRequest?: WebhookKeyRequest, options?: any): AxiosPromise<WebhookKeyCreateResponse> {
            return localVarFp.createWebhookKey(acceptLanguage, webhookKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Webhook key
         * @param {string} id Identifier of the resource
         * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookKey(id: string, acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum, options?: any): AxiosPromise<WebhookKeyDeleteResponse> {
            return localVarFp.deleteWebhookKey(id, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Webhook Key
         * @param {string} id Identifier of the resource
         * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKey(id: string, acceptLanguage?: GetWebhookKeyAcceptLanguageEnum, xChildCompanyId?: string, options?: any): AxiosPromise<WebhookKeyResponse> {
            return localVarFp.getWebhookKey(id, acceptLanguage, xChildCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Consume the list of webhook keys you have
         * @summary Get List of Webhook Keys
         * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
         * @param {number} [limit] The numbers of items to return, the maximum value is 250
         * @param {string} [search] General order search, e.g. by mail, reference etc.
         * @param {string} [next] next page
         * @param {string} [previous] previous page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookKeys(acceptLanguage?: GetWebhookKeysAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: any): AxiosPromise<GetWebhookKeysResponse> {
            return localVarFp.getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options).then((request) => request(axios, basePath));
        },
        /**
         * updates an existing webhook key
         * @summary Update Webhook Key
         * @param {string} id Identifier of the resource
         * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
         * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookKey(id: string, acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum, webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: any): AxiosPromise<WebhookKeyResponse> {
            return localVarFp.updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhookKeysApi - interface
 * @export
 * @interface WebhookKeysApi
 */
export interface WebhookKeysApiInterface {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    createWebhookKey(acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum, webhookKeyRequest?: WebhookKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebhookKeyCreateResponse>;

    /**
     * 
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    deleteWebhookKey(id: string, acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum, options?: RawAxiosRequestConfig): AxiosPromise<WebhookKeyDeleteResponse>;

    /**
     * 
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    getWebhookKey(id: string, acceptLanguage?: GetWebhookKeyAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig): AxiosPromise<WebhookKeyResponse>;

    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    getWebhookKeys(acceptLanguage?: GetWebhookKeysAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetWebhookKeysResponse>;

    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApiInterface
     */
    updateWebhookKey(id: string, acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum, webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebhookKeyResponse>;

}

/**
 * WebhookKeysApi - object-oriented interface
 * @export
 * @class WebhookKeysApi
 * @extends {BaseAPI}
 */
export class WebhookKeysApi extends BaseAPI implements WebhookKeysApiInterface {
    /**
     * Create a webhook key
     * @summary Create Webhook Key
     * @param {CreateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyRequest} [webhookKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    public createWebhookKey(acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum, webhookKeyRequest?: WebhookKeyRequest, options?: RawAxiosRequestConfig) {
        return WebhookKeysApiFp(this.configuration).createWebhookKey(acceptLanguage, webhookKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Webhook key
     * @param {string} id Identifier of the resource
     * @param {DeleteWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    public deleteWebhookKey(id: string, acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum, options?: RawAxiosRequestConfig) {
        return WebhookKeysApiFp(this.configuration).deleteWebhookKey(id, acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Webhook Key
     * @param {string} id Identifier of the resource
     * @param {GetWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    public getWebhookKey(id: string, acceptLanguage?: GetWebhookKeyAcceptLanguageEnum, xChildCompanyId?: string, options?: RawAxiosRequestConfig) {
        return WebhookKeysApiFp(this.configuration).getWebhookKey(id, acceptLanguage, xChildCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Consume the list of webhook keys you have
     * @summary Get List of Webhook Keys
     * @param {GetWebhookKeysAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {string} [xChildCompanyId] In the case of a holding company, the company id of the child company to which will process the request.
     * @param {number} [limit] The numbers of items to return, the maximum value is 250
     * @param {string} [search] General order search, e.g. by mail, reference etc.
     * @param {string} [next] next page
     * @param {string} [previous] previous page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    public getWebhookKeys(acceptLanguage?: GetWebhookKeysAcceptLanguageEnum, xChildCompanyId?: string, limit?: number, search?: string, next?: string, previous?: string, options?: RawAxiosRequestConfig) {
        return WebhookKeysApiFp(this.configuration).getWebhookKeys(acceptLanguage, xChildCompanyId, limit, search, next, previous, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * updates an existing webhook key
     * @summary Update Webhook Key
     * @param {string} id Identifier of the resource
     * @param {UpdateWebhookKeyAcceptLanguageEnum} [acceptLanguage] Use for knowing which language to use
     * @param {WebhookKeyUpdateRequest} [webhookKeyUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookKeysApi
     */
    public updateWebhookKey(id: string, acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum, webhookKeyUpdateRequest?: WebhookKeyUpdateRequest, options?: RawAxiosRequestConfig) {
        return WebhookKeysApiFp(this.configuration).updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreateWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type CreateWebhookKeyAcceptLanguageEnum = typeof CreateWebhookKeyAcceptLanguageEnum[keyof typeof CreateWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export const DeleteWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type DeleteWebhookKeyAcceptLanguageEnum = typeof DeleteWebhookKeyAcceptLanguageEnum[keyof typeof DeleteWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export const GetWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type GetWebhookKeyAcceptLanguageEnum = typeof GetWebhookKeyAcceptLanguageEnum[keyof typeof GetWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export const GetWebhookKeysAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type GetWebhookKeysAcceptLanguageEnum = typeof GetWebhookKeysAcceptLanguageEnum[keyof typeof GetWebhookKeysAcceptLanguageEnum];
/**
 * @export
 */
export const UpdateWebhookKeyAcceptLanguageEnum = {
    es: 'es',
    en: 'en'
} as const;
export type UpdateWebhookKeyAcceptLanguageEnum = typeof UpdateWebhookKeyAcceptLanguageEnum[keyof typeof UpdateWebhookKeyAcceptLanguageEnum];
