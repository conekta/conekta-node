/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * [Checkout](https://developers.conekta.com/reference/checkout) details
 * @export
 * @interface CheckoutRequest
 */
export interface CheckoutRequest {
    /**
     * Are the payment methods available for this link
     * @type {Array<string>}
     * @memberof CheckoutRequest
     */
    allowedPaymentMethods: Array<string>;
    /**
     * Unix timestamp of checkout expiration
     * @type {number}
     * @memberof CheckoutRequest
     */
    expiresAt?: number;
    /**
     * Redirection url back to the site in case of failed payment, applies only to HostedPayment.
     * @type {string}
     * @memberof CheckoutRequest
     */
    failureUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutRequest
     */
    monthlyInstallmentsEnabled?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof CheckoutRequest
     */
    monthlyInstallmentsOptions?: Array<number>;
    /**
     * Reason for payment
     * @type {string}
     * @memberof CheckoutRequest
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutRequest
     */
    onDemandEnabled?: boolean;
    /**
     * Redirection url back to the site in case of successful payment, applies only to HostedPayment
     * @type {string}
     * @memberof CheckoutRequest
     */
    successUrl?: string;
    /**
     * This field represents the type of checkout
     * @type {string}
     * @memberof CheckoutRequest
     */
    type?: string;
}

/**
 * Check if a given object implements the CheckoutRequest interface.
 */
export function instanceOfCheckoutRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allowedPaymentMethods" in value;

    return isInstance;
}

export function CheckoutRequestFromJSON(json: any): CheckoutRequest {
    return CheckoutRequestFromJSONTyped(json, false);
}

export function CheckoutRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowedPaymentMethods': json['allowed_payment_methods'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : json['expires_at'],
        'failureUrl': !exists(json, 'failure_url') ? undefined : json['failure_url'],
        'monthlyInstallmentsEnabled': !exists(json, 'monthly_installments_enabled') ? undefined : json['monthly_installments_enabled'],
        'monthlyInstallmentsOptions': !exists(json, 'monthly_installments_options') ? undefined : json['monthly_installments_options'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'onDemandEnabled': !exists(json, 'on_demand_enabled') ? undefined : json['on_demand_enabled'],
        'successUrl': !exists(json, 'success_url') ? undefined : json['success_url'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function CheckoutRequestToJSON(value?: CheckoutRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowed_payment_methods': value.allowedPaymentMethods,
        'expires_at': value.expiresAt,
        'failure_url': value.failureUrl,
        'monthly_installments_enabled': value.monthlyInstallmentsEnabled,
        'monthly_installments_options': value.monthlyInstallmentsOptions,
        'name': value.name,
        'on_demand_enabled': value.onDemandEnabled,
        'success_url': value.successUrl,
        'type': value.type,
    };
}

