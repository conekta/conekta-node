/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChargeRequest } from './ChargeRequest';
import {
    ChargeRequestFromJSON,
    ChargeRequestFromJSONTyped,
    ChargeRequestToJSON,
} from './ChargeRequest';
import type { CheckoutRequest } from './CheckoutRequest';
import {
    CheckoutRequestFromJSON,
    CheckoutRequestFromJSONTyped,
    CheckoutRequestToJSON,
} from './CheckoutRequest';
import type { CustomerShippingContacts } from './CustomerShippingContacts';
import {
    CustomerShippingContactsFromJSON,
    CustomerShippingContactsFromJSONTyped,
    CustomerShippingContactsToJSON,
} from './CustomerShippingContacts';
import type { OrderDiscountLinesRequest } from './OrderDiscountLinesRequest';
import {
    OrderDiscountLinesRequestFromJSON,
    OrderDiscountLinesRequestFromJSONTyped,
    OrderDiscountLinesRequestToJSON,
} from './OrderDiscountLinesRequest';
import type { OrderRequestCustomerInfo } from './OrderRequestCustomerInfo';
import {
    OrderRequestCustomerInfoFromJSON,
    OrderRequestCustomerInfoFromJSONTyped,
    OrderRequestCustomerInfoToJSON,
} from './OrderRequestCustomerInfo';
import type { OrderTaxRequest } from './OrderTaxRequest';
import {
    OrderTaxRequestFromJSON,
    OrderTaxRequestFromJSONTyped,
    OrderTaxRequestToJSON,
} from './OrderTaxRequest';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { ShippingRequest } from './ShippingRequest';
import {
    ShippingRequestFromJSON,
    ShippingRequestFromJSONTyped,
    ShippingRequestToJSON,
} from './ShippingRequest';

/**
 * a order
 * @export
 * @interface OrderRequest
 */
export interface OrderRequest {
    /**
     * List of [charges](https://developers.conekta.com/v2.1.0/reference/orderscreatecharge) that are applied to the order
     * @type {Array<ChargeRequest>}
     * @memberof OrderRequest
     */
    charges?: Array<ChargeRequest>;
    /**
     * 
     * @type {CheckoutRequest}
     * @memberof OrderRequest
     */
    checkout?: CheckoutRequest;
    /**
     * Currency with which the payment will be made. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
     * @type {string}
     * @memberof OrderRequest
     */
    currency: string;
    /**
     * 
     * @type {OrderRequestCustomerInfo}
     * @memberof OrderRequest
     */
    customerInfo: OrderRequestCustomerInfo;
    /**
     * List of [discounts](https://developers.conekta.com/v2.1.0/reference/orderscreatediscountline) that are applied to the order. You must have at least one discount.
     * @type {Array<OrderDiscountLinesRequest>}
     * @memberof OrderRequest
     */
    discountLines?: Array<OrderDiscountLinesRequest>;
    /**
     * List of [products](https://developers.conekta.com/v2.1.0/reference/orderscreateproduct) that are sold in the order. You must have at least one product.
     * @type {Array<Product>}
     * @memberof OrderRequest
     */
    lineItems: Array<Product>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderRequest
     */
    metadata?: { [key: string]: any; };
    /**
     * Allows you to fill out the shipping information at checkout
     * @type {boolean}
     * @memberof OrderRequest
     */
    needsShippingContact?: boolean;
    /**
     * Indicates whether the order charges must be preauthorized
     * @type {boolean}
     * @memberof OrderRequest
     */
    preAuthorize?: boolean;
    /**
     * 
     * @type {CustomerShippingContacts}
     * @memberof OrderRequest
     */
    shippingContact?: CustomerShippingContacts;
    /**
     * List of [shipping costs](https://developers.conekta.com/v2.1.0/reference/orderscreateshipping). If the online store offers digital products.
     * @type {Array<ShippingRequest>}
     * @memberof OrderRequest
     */
    shippingLines?: Array<ShippingRequest>;
    /**
     * List of [taxes](https://developers.conekta.com/v2.1.0/reference/orderscreatetaxes) that are applied to the order.
     * @type {Array<OrderTaxRequest>}
     * @memberof OrderRequest
     */
    taxLines?: Array<OrderTaxRequest>;
}

/**
 * Check if a given object implements the OrderRequest interface.
 */
export function instanceOfOrderRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "customerInfo" in value;
    isInstance = isInstance && "lineItems" in value;

    return isInstance;
}

export function OrderRequestFromJSON(json: any): OrderRequest {
    return OrderRequestFromJSONTyped(json, false);
}

export function OrderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'charges': !exists(json, 'charges') ? undefined : ((json['charges'] as Array<any>).map(ChargeRequestFromJSON)),
        'checkout': !exists(json, 'checkout') ? undefined : CheckoutRequestFromJSON(json['checkout']),
        'currency': json['currency'],
        'customerInfo': OrderRequestCustomerInfoFromJSON(json['customer_info']),
        'discountLines': !exists(json, 'discount_lines') ? undefined : ((json['discount_lines'] as Array<any>).map(OrderDiscountLinesRequestFromJSON)),
        'lineItems': ((json['line_items'] as Array<any>).map(ProductFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'needsShippingContact': !exists(json, 'needs_shipping_contact') ? undefined : json['needs_shipping_contact'],
        'preAuthorize': !exists(json, 'pre_authorize') ? undefined : json['pre_authorize'],
        'shippingContact': !exists(json, 'shipping_contact') ? undefined : CustomerShippingContactsFromJSON(json['shipping_contact']),
        'shippingLines': !exists(json, 'shipping_lines') ? undefined : ((json['shipping_lines'] as Array<any>).map(ShippingRequestFromJSON)),
        'taxLines': !exists(json, 'tax_lines') ? undefined : ((json['tax_lines'] as Array<any>).map(OrderTaxRequestFromJSON)),
    };
}

export function OrderRequestToJSON(value?: OrderRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'charges': value.charges === undefined ? undefined : ((value.charges as Array<any>).map(ChargeRequestToJSON)),
        'checkout': CheckoutRequestToJSON(value.checkout),
        'currency': value.currency,
        'customer_info': OrderRequestCustomerInfoToJSON(value.customerInfo),
        'discount_lines': value.discountLines === undefined ? undefined : ((value.discountLines as Array<any>).map(OrderDiscountLinesRequestToJSON)),
        'line_items': ((value.lineItems as Array<any>).map(ProductToJSON)),
        'metadata': value.metadata,
        'needs_shipping_contact': value.needsShippingContact,
        'pre_authorize': value.preAuthorize,
        'shipping_contact': CustomerShippingContactsToJSON(value.shippingContact),
        'shipping_lines': value.shippingLines === undefined ? undefined : ((value.shippingLines as Array<any>).map(ShippingRequestToJSON)),
        'tax_lines': value.taxLines === undefined ? undefined : ((value.taxLines as Array<any>).map(OrderTaxRequestToJSON)),
    };
}

