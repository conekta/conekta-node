/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransferMethodResponse } from './TransferMethodResponse';
import {
    TransferMethodResponseFromJSON,
    TransferMethodResponseFromJSONTyped,
    TransferMethodResponseToJSON,
} from './TransferMethodResponse';

/**
 * A transfer represents the action of sending an amount to a business bank account including the status, amount and method used to make the transfer.
 * @export
 * @interface TransfersResponse
 */
export interface TransfersResponse {
    /**
     * Amount in cents of the transfer.
     * @type {number}
     * @memberof TransfersResponse
     */
    amount?: number;
    /**
     * Date and time of creation of the transfer.
     * @type {number}
     * @memberof TransfersResponse
     */
    createdAt?: number;
    /**
     * The currency of the transfer. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
     * @type {string}
     * @memberof TransfersResponse
     */
    currency?: string;
    /**
     * Unique identifier of the transfer.
     * @type {string}
     * @memberof TransfersResponse
     */
    id?: string;
    /**
     * Indicates whether the transfer was created in live mode or test mode.
     * @type {boolean}
     * @memberof TransfersResponse
     */
    livemode?: boolean;
    /**
     * 
     * @type {TransferMethodResponse}
     * @memberof TransfersResponse
     */
    method?: TransferMethodResponse;
    /**
     * Object name, which is transfer.
     * @type {string}
     * @memberof TransfersResponse
     */
    object?: string;
    /**
     * Description of the transfer.
     * @type {string}
     * @memberof TransfersResponse
     */
    statementDescription?: string;
    /**
     * Reference number of the transfer.
     * @type {string}
     * @memberof TransfersResponse
     */
    statementReference?: string;
    /**
     * Code indicating transfer status.
     * @type {string}
     * @memberof TransfersResponse
     */
    status?: string;
}

/**
 * Check if a given object implements the TransfersResponse interface.
 */
export function instanceOfTransfersResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransfersResponseFromJSON(json: any): TransfersResponse {
    return TransfersResponseFromJSONTyped(json, false);
}

export function TransfersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransfersResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'livemode': !exists(json, 'livemode') ? undefined : json['livemode'],
        'method': !exists(json, 'method') ? undefined : TransferMethodResponseFromJSON(json['method']),
        'object': !exists(json, 'object') ? undefined : json['object'],
        'statementDescription': !exists(json, 'statement_description') ? undefined : json['statement_description'],
        'statementReference': !exists(json, 'statement_reference') ? undefined : json['statement_reference'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function TransfersResponseToJSON(value?: TransfersResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'created_at': value.createdAt,
        'currency': value.currency,
        'id': value.id,
        'livemode': value.livemode,
        'method': TransferMethodResponseToJSON(value.method),
        'object': value.object,
        'statement_description': value.statementDescription,
        'statement_reference': value.statementReference,
        'status': value.status,
    };
}

