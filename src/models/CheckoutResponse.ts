/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * checkout response
 * @export
 * @interface CheckoutResponse
 */
export interface CheckoutResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof CheckoutResponse
     */
    allowedPaymentMethods?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutResponse
     */
    canNotExpire?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CheckoutResponse
     */
    emailsSent?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof CheckoutResponse
     */
    excludeCardNetworks?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof CheckoutResponse
     */
    expiresAt?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    failureUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutResponse
     */
    force3dsFlow?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutResponse
     */
    livemode: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CheckoutResponse
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutResponse
     */
    monthlyInstallmentsEnabled?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof CheckoutResponse
     */
    monthlyInstallmentsOptions?: Array<number>;
    /**
     * Reason for charge
     * @type {string}
     * @memberof CheckoutResponse
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutResponse
     */
    needsShippingContact?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    object: string;
    /**
     * 
     * @type {number}
     * @memberof CheckoutResponse
     */
    paidPaymentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckoutResponse
     */
    paymentsLimitCount?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CheckoutResponse
     */
    recurrent?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    slug?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckoutResponse
     */
    smsSent?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckoutResponse
     */
    startsAt?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    successUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckoutResponse
     */
    url?: string;
}

/**
 * Check if a given object implements the CheckoutResponse interface.
 */
export function instanceOfCheckoutResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "livemode" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "object" in value;

    return isInstance;
}

export function CheckoutResponseFromJSON(json: any): CheckoutResponse {
    return CheckoutResponseFromJSONTyped(json, false);
}

export function CheckoutResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowedPaymentMethods': !exists(json, 'allowed_payment_methods') ? undefined : json['allowed_payment_methods'],
        'canNotExpire': !exists(json, 'can_not_expire') ? undefined : json['can_not_expire'],
        'emailsSent': !exists(json, 'emails_sent') ? undefined : json['emails_sent'],
        'excludeCardNetworks': !exists(json, 'exclude_card_networks') ? undefined : json['exclude_card_networks'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : json['expires_at'],
        'failureUrl': !exists(json, 'failure_url') ? undefined : json['failure_url'],
        'force3dsFlow': !exists(json, 'force_3ds_flow') ? undefined : json['force_3ds_flow'],
        'id': json['id'],
        'livemode': json['livemode'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'monthlyInstallmentsEnabled': !exists(json, 'monthly_installments_enabled') ? undefined : json['monthly_installments_enabled'],
        'monthlyInstallmentsOptions': !exists(json, 'monthly_installments_options') ? undefined : json['monthly_installments_options'],
        'name': json['name'],
        'needsShippingContact': !exists(json, 'needs_shipping_contact') ? undefined : json['needs_shipping_contact'],
        'object': json['object'],
        'paidPaymentsCount': !exists(json, 'paid_payments_count') ? undefined : json['paid_payments_count'],
        'paymentsLimitCount': !exists(json, 'payments_limit_count') ? undefined : json['payments_limit_count'],
        'recurrent': !exists(json, 'recurrent') ? undefined : json['recurrent'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'smsSent': !exists(json, 'sms_sent') ? undefined : json['sms_sent'],
        'startsAt': !exists(json, 'starts_at') ? undefined : json['starts_at'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'successUrl': !exists(json, 'success_url') ? undefined : json['success_url'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function CheckoutResponseToJSON(value?: CheckoutResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowed_payment_methods': value.allowedPaymentMethods,
        'can_not_expire': value.canNotExpire,
        'emails_sent': value.emailsSent,
        'exclude_card_networks': value.excludeCardNetworks,
        'expires_at': value.expiresAt,
        'failure_url': value.failureUrl,
        'force_3ds_flow': value.force3dsFlow,
        'id': value.id,
        'livemode': value.livemode,
        'metadata': value.metadata,
        'monthly_installments_enabled': value.monthlyInstallmentsEnabled,
        'monthly_installments_options': value.monthlyInstallmentsOptions,
        'name': value.name,
        'needs_shipping_contact': value.needsShippingContact,
        'object': value.object,
        'paid_payments_count': value.paidPaymentsCount,
        'payments_limit_count': value.paymentsLimitCount,
        'recurrent': value.recurrent,
        'slug': value.slug,
        'sms_sent': value.smsSent,
        'starts_at': value.startsAt,
        'status': value.status,
        'success_url': value.successUrl,
        'type': value.type,
        'url': value.url,
    };
}

