/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * a plan
 * @export
 * @interface PlanRequest
 */
export interface PlanRequest {
    /**
     * The amount in cents that will be charged on the interval specified.
     * @type {number}
     * @memberof PlanRequest
     */
    amount: number;
    /**
     * ISO 4217 for currencies, for the Mexican peso it is MXN/USD
     * @type {string}
     * @memberof PlanRequest
     */
    currency?: string;
    /**
     * Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count.
     * @type {number}
     * @memberof PlanRequest
     */
    expiryCount?: number;
    /**
     * Frequency of the charge, which together with the interval, can be every 3 weeks, every 4 months, every 2 years, every 5 fortnights
     * @type {number}
     * @memberof PlanRequest
     */
    frequency: number;
    /**
     * internal reference id
     * @type {string}
     * @memberof PlanRequest
     */
    id?: string;
    /**
     * The interval of time between each charge.
     * @type {string}
     * @memberof PlanRequest
     */
    interval: PlanRequestIntervalEnum;
    /**
     * The name of the plan.
     * @type {string}
     * @memberof PlanRequest
     */
    name: string;
    /**
     * The number of days the customer will have a free trial.
     * @type {number}
     * @memberof PlanRequest
     */
    trialPeriodDays?: number;
}


/**
 * @export
 */
export const PlanRequestIntervalEnum = {
    Week: 'week',
    HalfMonth: 'half_month',
    Month: 'month',
    Year: 'year'
} as const;
export type PlanRequestIntervalEnum = typeof PlanRequestIntervalEnum[keyof typeof PlanRequestIntervalEnum];


/**
 * Check if a given object implements the PlanRequest interface.
 */
export function instanceOfPlanRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "frequency" in value;
    isInstance = isInstance && "interval" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function PlanRequestFromJSON(json: any): PlanRequest {
    return PlanRequestFromJSONTyped(json, false);
}

export function PlanRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'expiryCount': !exists(json, 'expiry_count') ? undefined : json['expiry_count'],
        'frequency': json['frequency'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'interval': json['interval'],
        'name': json['name'],
        'trialPeriodDays': !exists(json, 'trial_period_days') ? undefined : json['trial_period_days'],
    };
}

export function PlanRequestToJSON(value?: PlanRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'currency': value.currency,
        'expiry_count': value.expiryCount,
        'frequency': value.frequency,
        'id': value.id,
        'interval': value.interval,
        'name': value.name,
        'trial_period_days': value.trialPeriodDays,
    };
}

