/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DetailsError } from './DetailsError';
import {
    DetailsErrorFromJSON,
    DetailsErrorFromJSONTyped,
    DetailsErrorToJSON,
} from './DetailsError';

/**
 * err model
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {Array<DetailsError>}
     * @memberof ModelError
     */
    details?: Array<DetailsError>;
    /**
     * log id
     * @type {string}
     * @memberof ModelError
     */
    logId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    object?: string;
}

/**
 * Check if a given object implements the ModelError interface.
 */
export function instanceOfModelError(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelErrorFromJSON(json: any): ModelError {
    return ModelErrorFromJSONTyped(json, false);
}

export function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'details': !exists(json, 'details') ? undefined : ((json['details'] as Array<any>).map(DetailsErrorFromJSON)),
        'logId': !exists(json, 'log_id') ? undefined : json['log_id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'object': !exists(json, 'object') ? undefined : json['object'],
    };
}

export function ModelErrorToJSON(value?: ModelError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'details': value.details === undefined ? undefined : ((value.details as Array<any>).map(DetailsErrorToJSON)),
        'log_id': value.logId,
        'type': value.type,
        'object': value.object,
    };
}

