/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChargeOrderResponsePaymentMethod } from './ChargeOrderResponsePaymentMethod';
import {
    ChargeOrderResponsePaymentMethodFromJSON,
    ChargeOrderResponsePaymentMethodFromJSONTyped,
    ChargeOrderResponsePaymentMethodToJSON,
} from './ChargeOrderResponsePaymentMethod';
import type { ChargeResponseRefunds } from './ChargeResponseRefunds';
import {
    ChargeResponseRefundsFromJSON,
    ChargeResponseRefundsFromJSONTyped,
    ChargeResponseRefundsToJSON,
} from './ChargeResponseRefunds';

/**
 * 
 * @export
 * @interface ChargesDataResponse
 */
export interface ChargesDataResponse {
    /**
     * 
     * @type {number}
     * @memberof ChargesDataResponse
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargesDataResponse
     */
    createdAt?: number;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    customerId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    deviceFingerprint?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    failureCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    failureMessage?: string;
    /**
     * 
     * @type {number}
     * @memberof ChargesDataResponse
     */
    fee?: number;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChargesDataResponse
     */
    livemode?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    orderId?: string;
    /**
     * 
     * @type {number}
     * @memberof ChargesDataResponse
     */
    paidAt?: number | null;
    /**
     * 
     * @type {ChargeOrderResponsePaymentMethod}
     * @memberof ChargesDataResponse
     */
    paymentMethod?: ChargeOrderResponsePaymentMethod;
    /**
     * 
     * @type {ChargeResponseRefunds}
     * @memberof ChargesDataResponse
     */
    refunds?: ChargeResponseRefunds | null;
    /**
     * 
     * @type {string}
     * @memberof ChargesDataResponse
     */
    status?: string;
}

/**
 * Check if a given object implements the ChargesDataResponse interface.
 */
export function instanceOfChargesDataResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChargesDataResponseFromJSON(json: any): ChargesDataResponse {
    return ChargesDataResponseFromJSONTyped(json, false);
}

export function ChargesDataResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargesDataResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'deviceFingerprint': !exists(json, 'device_fingerprint') ? undefined : json['device_fingerprint'],
        'failureCode': !exists(json, 'failure_code') ? undefined : json['failure_code'],
        'failureMessage': !exists(json, 'failure_message') ? undefined : json['failure_message'],
        'fee': !exists(json, 'fee') ? undefined : json['fee'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'livemode': !exists(json, 'livemode') ? undefined : json['livemode'],
        'object': !exists(json, 'object') ? undefined : json['object'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'paidAt': !exists(json, 'paid_at') ? undefined : json['paid_at'],
        'paymentMethod': !exists(json, 'payment_method') ? undefined : ChargeOrderResponsePaymentMethodFromJSON(json['payment_method']),
        'refunds': !exists(json, 'refunds') ? undefined : ChargeResponseRefundsFromJSON(json['refunds']),
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function ChargesDataResponseToJSON(value?: ChargesDataResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'created_at': value.createdAt,
        'currency': value.currency,
        'customer_id': value.customerId,
        'description': value.description,
        'device_fingerprint': value.deviceFingerprint,
        'failure_code': value.failureCode,
        'failure_message': value.failureMessage,
        'fee': value.fee,
        'id': value.id,
        'livemode': value.livemode,
        'object': value.object,
        'order_id': value.orderId,
        'paid_at': value.paidAt,
        'payment_method': ChargeOrderResponsePaymentMethodToJSON(value.paymentMethod),
        'refunds': ChargeResponseRefundsToJSON(value.refunds),
        'status': value.status,
    };
}

