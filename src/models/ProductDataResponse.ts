/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductDataResponse
 */
export interface ProductDataResponse {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ProductDataResponse
     */
    antifraudInfo?: { [key: string]: any; };
    /**
     * The brand of the item.
     * @type {string}
     * @memberof ProductDataResponse
     */
    brand?: string;
    /**
     * Short description of the item
     * @type {string}
     * @memberof ProductDataResponse
     */
    description?: string;
    /**
     * It is a key/value hash that can hold custom fields. Maximum 100 elements and allows special characters.
     * @type {{ [key: string]: string; }}
     * @memberof ProductDataResponse
     */
    metadata?: { [key: string]: string; };
    /**
     * The name of the item. It will be displayed in the order.
     * @type {string}
     * @memberof ProductDataResponse
     */
    name: string;
    /**
     * The quantity of the item in the order.
     * @type {number}
     * @memberof ProductDataResponse
     */
    quantity: number;
    /**
     * The stock keeping unit for the item. It is used to identify the item in the order.
     * @type {string}
     * @memberof ProductDataResponse
     */
    sku?: string;
    /**
     * List of tags for the item. It is used to identify the item in the order.
     * @type {Array<string>}
     * @memberof ProductDataResponse
     */
    tags?: Array<string>;
    /**
     * The price of the item in cents.
     * @type {number}
     * @memberof ProductDataResponse
     */
    unitPrice: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDataResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDataResponse
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDataResponse
     */
    parentId?: string;
}

/**
 * Check if a given object implements the ProductDataResponse interface.
 */
export function instanceOfProductDataResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "quantity" in value;
    isInstance = isInstance && "unitPrice" in value;

    return isInstance;
}

export function ProductDataResponseFromJSON(json: any): ProductDataResponse {
    return ProductDataResponseFromJSONTyped(json, false);
}

export function ProductDataResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductDataResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'antifraudInfo': !exists(json, 'antifraud_info') ? undefined : json['antifraud_info'],
        'brand': !exists(json, 'brand') ? undefined : json['brand'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'name': json['name'],
        'quantity': json['quantity'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'unitPrice': json['unit_price'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'object': !exists(json, 'object') ? undefined : json['object'],
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
    };
}

export function ProductDataResponseToJSON(value?: ProductDataResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'antifraud_info': value.antifraudInfo,
        'brand': value.brand,
        'description': value.description,
        'metadata': value.metadata,
        'name': value.name,
        'quantity': value.quantity,
        'sku': value.sku,
        'tags': value.tags,
        'unit_price': value.unitPrice,
        'id': value.id,
        'object': value.object,
        'parent_id': value.parentId,
    };
}

