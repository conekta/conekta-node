/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TokenResponseCheckout } from './TokenResponseCheckout';
import {
    TokenResponseCheckoutFromJSON,
    TokenResponseCheckoutFromJSONTyped,
    TokenResponseCheckoutToJSON,
} from './TokenResponseCheckout';

/**
 * token response
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {TokenResponseCheckout}
     * @memberof TokenResponse
     * @deprecated
     */
    checkout?: TokenResponseCheckout | null;
    /**
     * Unique identifier for the token generated by Conekta.
     * @type {string}
     * @memberof TokenResponse
     */
    id: string;
    /**
     * Indicates whether the token is in live mode or test mode.
     * @type {boolean}
     * @memberof TokenResponse
     */
    livemode: boolean;
    /**
     * Indicates the type of object, in this case token
     * @type {string}
     * @memberof TokenResponse
     */
    object: string;
    /**
     * Indicates if the token has been used
     * @type {boolean}
     * @memberof TokenResponse
     */
    used: boolean;
}

/**
 * Check if a given object implements the TokenResponse interface.
 */
export function instanceOfTokenResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "livemode" in value;
    isInstance = isInstance && "object" in value;
    isInstance = isInstance && "used" in value;

    return isInstance;
}

export function TokenResponseFromJSON(json: any): TokenResponse {
    return TokenResponseFromJSONTyped(json, false);
}

export function TokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'checkout': !exists(json, 'checkout') ? undefined : TokenResponseCheckoutFromJSON(json['checkout']),
        'id': json['id'],
        'livemode': json['livemode'],
        'object': json['object'],
        'used': json['used'],
    };
}

export function TokenResponseToJSON(value?: TokenResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'checkout': TokenResponseCheckoutToJSON(value.checkout),
        'id': value.id,
        'livemode': value.livemode,
        'object': value.object,
        'used': value.used,
    };
}

