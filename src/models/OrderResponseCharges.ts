/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChargesDataResponse } from './ChargesDataResponse';
import {
    ChargesDataResponseFromJSON,
    ChargesDataResponseFromJSONTyped,
    ChargesDataResponseToJSON,
} from './ChargesDataResponse';

/**
 * The charges associated with the order
 * @export
 * @interface OrderResponseCharges
 */
export interface OrderResponseCharges {
    /**
     * Object type, in this case is list
     * @type {string}
     * @memberof OrderResponseCharges
     */
    object: string;
    /**
     * Indicates if there are more pages to be requested
     * @type {boolean}
     * @memberof OrderResponseCharges
     */
    hasMore: boolean;
    /**
     * 
     * @type {Array<ChargesDataResponse>}
     * @memberof OrderResponseCharges
     */
    data?: Array<ChargesDataResponse>;
}

/**
 * Check if a given object implements the OrderResponseCharges interface.
 */
export function instanceOfOrderResponseCharges(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "object" in value;
    isInstance = isInstance && "hasMore" in value;

    return isInstance;
}

export function OrderResponseChargesFromJSON(json: any): OrderResponseCharges {
    return OrderResponseChargesFromJSONTyped(json, false);
}

export function OrderResponseChargesFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderResponseCharges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'object': json['object'],
        'hasMore': json['has_more'],
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(ChargesDataResponseFromJSON)),
    };
}

export function OrderResponseChargesToJSON(value?: OrderResponseCharges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'object': value.object,
        'has_more': value.hasMore,
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(ChargesDataResponseToJSON)),
    };
}

