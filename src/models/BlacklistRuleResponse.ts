/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlacklistRuleResponse
 */
export interface BlacklistRuleResponse {
    /**
     * Blacklist rule id
     * @type {string}
     * @memberof BlacklistRuleResponse
     */
    id?: string;
    /**
     * field used for blacklists rule
     * @type {string}
     * @memberof BlacklistRuleResponse
     */
    field?: string;
    /**
     * value used for blacklists rule
     * @type {string}
     * @memberof BlacklistRuleResponse
     */
    value?: string;
    /**
     * use an description for blacklisted rule
     * @type {string}
     * @memberof BlacklistRuleResponse
     */
    description?: string;
}

/**
 * Check if a given object implements the BlacklistRuleResponse interface.
 */
export function instanceOfBlacklistRuleResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlacklistRuleResponseFromJSON(json: any): BlacklistRuleResponse {
    return BlacklistRuleResponseFromJSONTyped(json, false);
}

export function BlacklistRuleResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlacklistRuleResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'field': !exists(json, 'field') ? undefined : json['field'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function BlacklistRuleResponseToJSON(value?: BlacklistRuleResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'field': value.field,
        'value': value.value,
        'description': value.description,
    };
}

