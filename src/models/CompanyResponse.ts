/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompanyFiscalInfoResponse } from './CompanyFiscalInfoResponse';
import {
    CompanyFiscalInfoResponseFromJSON,
    CompanyFiscalInfoResponseFromJSONTyped,
    CompanyFiscalInfoResponseToJSON,
} from './CompanyFiscalInfoResponse';
import type { CompanyPayoutDestinationResponse } from './CompanyPayoutDestinationResponse';
import {
    CompanyPayoutDestinationResponseFromJSON,
    CompanyPayoutDestinationResponseFromJSONTyped,
    CompanyPayoutDestinationResponseToJSON,
} from './CompanyPayoutDestinationResponse';

/**
 * Company model
 * @export
 * @interface CompanyResponse
 */
export interface CompanyResponse {
    /**
     * The child company's unique identifier
     * @type {string}
     * @memberof CompanyResponse
     */
    id?: string;
    /**
     * The resource's creation date (unix timestamp)
     * @type {number}
     * @memberof CompanyResponse
     */
    createdAt?: number;
    /**
     * The child company's name
     * @type {string}
     * @memberof CompanyResponse
     */
    name?: string;
    /**
     * The resource's type
     * @type {string}
     * @memberof CompanyResponse
     */
    object?: CompanyResponseObjectEnum;
    /**
     * Id of the parent company
     * @type {string}
     * @memberof CompanyResponse
     */
    parentCompanyId?: string;
    /**
     * Whether the parent company's fiscal data is to be used for liquidation and tax purposes
     * @type {boolean}
     * @memberof CompanyResponse
     */
    useParentFiscalData?: boolean;
    /**
     * 
     * @type {CompanyPayoutDestinationResponse}
     * @memberof CompanyResponse
     */
    payoutDestination?: CompanyPayoutDestinationResponse;
    /**
     * 
     * @type {CompanyFiscalInfoResponse}
     * @memberof CompanyResponse
     */
    fiscalInfo?: CompanyFiscalInfoResponse;
}


/**
 * @export
 */
export const CompanyResponseObjectEnum = {
    Company: 'company'
} as const;
export type CompanyResponseObjectEnum = typeof CompanyResponseObjectEnum[keyof typeof CompanyResponseObjectEnum];


/**
 * Check if a given object implements the CompanyResponse interface.
 */
export function instanceOfCompanyResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompanyResponseFromJSON(json: any): CompanyResponse {
    return CompanyResponseFromJSONTyped(json, false);
}

export function CompanyResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompanyResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'object': !exists(json, 'object') ? undefined : json['object'],
        'parentCompanyId': !exists(json, 'parent_company_id') ? undefined : json['parent_company_id'],
        'useParentFiscalData': !exists(json, 'use_parent_fiscal_data') ? undefined : json['use_parent_fiscal_data'],
        'payoutDestination': !exists(json, 'payout_destination') ? undefined : CompanyPayoutDestinationResponseFromJSON(json['payout_destination']),
        'fiscalInfo': !exists(json, 'fiscal_info') ? undefined : CompanyFiscalInfoResponseFromJSON(json['fiscal_info']),
    };
}

export function CompanyResponseToJSON(value?: CompanyResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': value.createdAt,
        'name': value.name,
        'object': value.object,
        'parent_company_id': value.parentCompanyId,
        'use_parent_fiscal_data': value.useParentFiscalData,
        'payout_destination': CompanyPayoutDestinationResponseToJSON(value.payoutDestination),
        'fiscal_info': CompanyFiscalInfoResponseToJSON(value.fiscalInfo),
    };
}

