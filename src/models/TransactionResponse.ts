/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The Transaction object represents the actions or steps of an order. Statuses can be: unprocessed, pending, available, owen, paid_out, voided, capture, capture_reversal, liquidation, liquidation_reversal, payout, payout_reversal, refund, refund_reversal, chargeback, chargeback_reversal, rounding_adjustment, won_chargeback, transferred, and transferred.
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     * The amount of the transaction.
     * @type {number}
     * @memberof TransactionResponse
     */
    amount: number;
    /**
     * Randomly assigned unique order identifier associated with the charge.
     * @type {string}
     * @memberof TransactionResponse
     */
    charge: string;
    /**
     * Date and time of creation of the transaction in Unix format.
     * @type {number}
     * @memberof TransactionResponse
     */
    createdAt: number;
    /**
     * The currency of the transaction. It uses the 3-letter code of the [International Standard ISO 4217.](https://es.wikipedia.org/wiki/ISO_4217)
     * @type {string}
     * @memberof TransactionResponse
     */
    currency: string;
    /**
     * The amount to be deducted for taxes and commissions.
     * @type {number}
     * @memberof TransactionResponse
     */
    fee: number;
    /**
     * Unique identifier of the transaction.
     * @type {string}
     * @memberof TransactionResponse
     */
    id: string;
    /**
     * Indicates whether the transaction was created in live mode or test mode.
     * @type {boolean}
     * @memberof TransactionResponse
     */
    livemode: boolean;
    /**
     * The net amount after deducting commissions and taxes.
     * @type {number}
     * @memberof TransactionResponse
     */
    net: number;
    /**
     * Object name, which is transaction.
     * @type {string}
     * @memberof TransactionResponse
     */
    object: string;
    /**
     * Code indicating transaction status.
     * @type {string}
     * @memberof TransactionResponse
     */
    status: string;
    /**
     * Transaction Type
     * @type {string}
     * @memberof TransactionResponse
     */
    type: string;
}

/**
 * Check if a given object implements the TransactionResponse interface.
 */
export function instanceOfTransactionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "charge" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "livemode" in value;
    isInstance = isInstance && "net" in value;
    isInstance = isInstance && "object" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function TransactionResponseFromJSON(json: any): TransactionResponse {
    return TransactionResponseFromJSONTyped(json, false);
}

export function TransactionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'charge': json['charge'],
        'createdAt': json['created_at'],
        'currency': json['currency'],
        'fee': json['fee'],
        'id': json['id'],
        'livemode': json['livemode'],
        'net': json['net'],
        'object': json['object'],
        'status': json['status'],
        'type': json['type'],
    };
}

export function TransactionResponseToJSON(value?: TransactionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'charge': value.charge,
        'created_at': value.createdAt,
        'currency': value.currency,
        'fee': value.fee,
        'id': value.id,
        'livemode': value.livemode,
        'net': value.net,
        'object': value.object,
        'status': value.status,
        'type': value.type,
    };
}

