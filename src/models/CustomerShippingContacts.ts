/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomerShippingContactsAddress } from './CustomerShippingContactsAddress';
import {
    CustomerShippingContactsAddressFromJSON,
    CustomerShippingContactsAddressFromJSONTyped,
    CustomerShippingContactsAddressToJSON,
} from './CustomerShippingContactsAddress';

/**
 * [Shipping](https://developers.conekta.com/v2.1.0/reference/createcustomershippingcontacts)
 * details, required in case of sending a shipping. If we do not receive a shipping_contact on the order, the default shipping_contact of the customer will be used.
 * @export
 * @interface CustomerShippingContacts
 */
export interface CustomerShippingContacts {
    /**
     * Phone contact
     * @type {string}
     * @memberof CustomerShippingContacts
     */
    phone?: string;
    /**
     * Name of the person who will receive the order
     * @type {string}
     * @memberof CustomerShippingContacts
     */
    receiver?: string;
    /**
     * The street names between which the order will be delivered.
     * @type {string}
     * @memberof CustomerShippingContacts
     */
    betweenStreets?: string;
    /**
     * 
     * @type {CustomerShippingContactsAddress}
     * @memberof CustomerShippingContacts
     */
    address: CustomerShippingContactsAddress;
    /**
     * 
     * @type {string}
     * @memberof CustomerShippingContacts
     */
    parentId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerShippingContacts
     */
    _default?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerShippingContacts
     */
    deleted?: boolean | null;
}

/**
 * Check if a given object implements the CustomerShippingContacts interface.
 */
export function instanceOfCustomerShippingContacts(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function CustomerShippingContactsFromJSON(json: any): CustomerShippingContacts {
    return CustomerShippingContactsFromJSONTyped(json, false);
}

export function CustomerShippingContactsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerShippingContacts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'receiver': !exists(json, 'receiver') ? undefined : json['receiver'],
        'betweenStreets': !exists(json, 'between_streets') ? undefined : json['between_streets'],
        'address': CustomerShippingContactsAddressFromJSON(json['address']),
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        '_default': !exists(json, 'default') ? undefined : json['default'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
    };
}

export function CustomerShippingContactsToJSON(value?: CustomerShippingContacts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'phone': value.phone,
        'receiver': value.receiver,
        'between_streets': value.betweenStreets,
        'address': CustomerShippingContactsAddressToJSON(value.address),
        'parent_id': value.parentId,
        'default': value._default,
        'deleted': value.deleted,
    };
}

