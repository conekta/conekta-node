/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Checkout,
  CheckoutResponse,
  CheckoutsResponse,
  EmailCheckoutRequest,
  ModelError,
  SmsCheckoutRequest,
} from '../models';
import {
    CheckoutFromJSON,
    CheckoutToJSON,
    CheckoutResponseFromJSON,
    CheckoutResponseToJSON,
    CheckoutsResponseFromJSON,
    CheckoutsResponseToJSON,
    EmailCheckoutRequestFromJSON,
    EmailCheckoutRequestToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    SmsCheckoutRequestFromJSON,
    SmsCheckoutRequestToJSON,
} from '../models';

export interface CancelCheckoutRequest {
    id: string;
    acceptLanguage?: CancelCheckoutAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface CreateCheckoutRequest {
    checkout: Checkout;
    acceptLanguage?: CreateCheckoutAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface EmailCheckoutOperationRequest {
    id: string;
    emailCheckoutRequest: EmailCheckoutRequest;
    acceptLanguage?: EmailCheckoutOperationAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetCheckoutRequest {
    id: string;
    acceptLanguage?: GetCheckoutAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetCheckoutsRequest {
    acceptLanguage?: GetCheckoutsAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    search?: string;
    next?: string;
    previous?: string;
}

export interface SmsCheckoutOperationRequest {
    id: string;
    smsCheckoutRequest: SmsCheckoutRequest;
    acceptLanguage?: SmsCheckoutOperationAcceptLanguageEnum;
    xChildCompanyId?: string;
}

/**
 * 
 */
export class PaymentLinkApi extends runtime.BaseAPI {

    /**
     * Cancel Payment Link
     */
    async cancelCheckoutRaw(requestParameters: CancelCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Cancel Payment Link
     */
    async cancelCheckout(requestParameters: CancelCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutResponse> {
        const response = await this.cancelCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Unique Payment Link
     */
    async createCheckoutRaw(requestParameters: CreateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutResponse>> {
        if (requestParameters.checkout === null || requestParameters.checkout === undefined) {
            throw new runtime.RequiredError('checkout','Required parameter requestParameters.checkout was null or undefined when calling createCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckoutToJSON(requestParameters.checkout),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Create Unique Payment Link
     */
    async createCheckout(requestParameters: CreateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutResponse> {
        const response = await this.createCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email
     */
    async emailCheckoutRaw(requestParameters: EmailCheckoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling emailCheckout.');
        }

        if (requestParameters.emailCheckoutRequest === null || requestParameters.emailCheckoutRequest === undefined) {
            throw new runtime.RequiredError('emailCheckoutRequest','Required parameter requestParameters.emailCheckoutRequest was null or undefined when calling emailCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/{id}/email`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCheckoutRequestToJSON(requestParameters.emailCheckoutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Send an email
     */
    async emailCheckout(requestParameters: EmailCheckoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutResponse> {
        const response = await this.emailCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a payment link by ID
     */
    async getCheckoutRaw(requestParameters: GetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Get a payment link by ID
     */
    async getCheckout(requestParameters: GetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutResponse> {
        const response = await this.getCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of links generated by the merchant
     * Get a list of payment links
     */
    async getCheckoutsRaw(requestParameters: GetCheckoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        if (requestParameters.previous !== undefined) {
            queryParameters['previous'] = requestParameters.previous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutsResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of links generated by the merchant
     * Get a list of payment links
     */
    async getCheckouts(requestParameters: GetCheckoutsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutsResponse> {
        const response = await this.getCheckoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an sms
     */
    async smsCheckoutRaw(requestParameters: SmsCheckoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling smsCheckout.');
        }

        if (requestParameters.smsCheckoutRequest === null || requestParameters.smsCheckoutRequest === undefined) {
            throw new runtime.RequiredError('smsCheckoutRequest','Required parameter requestParameters.smsCheckoutRequest was null or undefined when calling smsCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/checkouts/{id}/sms`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmsCheckoutRequestToJSON(requestParameters.smsCheckoutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Send an sms
     */
    async smsCheckout(requestParameters: SmsCheckoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutResponse> {
        const response = await this.smsCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CancelCheckoutAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CancelCheckoutAcceptLanguageEnum = typeof CancelCheckoutAcceptLanguageEnum[keyof typeof CancelCheckoutAcceptLanguageEnum];
/**
 * @export
 */
export const CreateCheckoutAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CreateCheckoutAcceptLanguageEnum = typeof CreateCheckoutAcceptLanguageEnum[keyof typeof CreateCheckoutAcceptLanguageEnum];
/**
 * @export
 */
export const EmailCheckoutOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type EmailCheckoutOperationAcceptLanguageEnum = typeof EmailCheckoutOperationAcceptLanguageEnum[keyof typeof EmailCheckoutOperationAcceptLanguageEnum];
/**
 * @export
 */
export const GetCheckoutAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetCheckoutAcceptLanguageEnum = typeof GetCheckoutAcceptLanguageEnum[keyof typeof GetCheckoutAcceptLanguageEnum];
/**
 * @export
 */
export const GetCheckoutsAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetCheckoutsAcceptLanguageEnum = typeof GetCheckoutsAcceptLanguageEnum[keyof typeof GetCheckoutsAcceptLanguageEnum];
/**
 * @export
 */
export const SmsCheckoutOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type SmsCheckoutOperationAcceptLanguageEnum = typeof SmsCheckoutOperationAcceptLanguageEnum[keyof typeof SmsCheckoutOperationAcceptLanguageEnum];
