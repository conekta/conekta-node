/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelError,
  Product,
  ProductOrderResponse,
  UpdateProduct,
} from '../models';
import {
    ModelErrorFromJSON,
    ModelErrorToJSON,
    ProductFromJSON,
    ProductToJSON,
    ProductOrderResponseFromJSON,
    ProductOrderResponseToJSON,
    UpdateProductFromJSON,
    UpdateProductToJSON,
} from '../models';

export interface OrdersCreateProductRequest {
    id: string;
    product: Product;
    acceptLanguage?: OrdersCreateProductAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersDeleteProductRequest {
    id: string;
    lineItemId: string;
    acceptLanguage?: OrdersDeleteProductAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersUpdateProductRequest {
    id: string;
    lineItemId: string;
    updateProduct: UpdateProduct;
    acceptLanguage?: OrdersUpdateProductAcceptLanguageEnum;
    xChildCompanyId?: string;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Create a new product for an existing order.
     * Create Product
     */
    async ordersCreateProductRaw(requestParameters: OrdersCreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersCreateProduct.');
        }

        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling ordersCreateProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/line_items`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductOrderResponseFromJSON(jsonValue));
    }

    /**
     * Create a new product for an existing order.
     * Create Product
     */
    async ordersCreateProduct(requestParameters: OrdersCreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductOrderResponse> {
        const response = await this.ordersCreateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete product for an existing orden
     * Delete Product
     */
    async ordersDeleteProductRaw(requestParameters: OrdersDeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersDeleteProduct.');
        }

        if (requestParameters.lineItemId === null || requestParameters.lineItemId === undefined) {
            throw new runtime.RequiredError('lineItemId','Required parameter requestParameters.lineItemId was null or undefined when calling ordersDeleteProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/line_items/{line_item_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"line_item_id"}}`, encodeURIComponent(String(requestParameters.lineItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductOrderResponseFromJSON(jsonValue));
    }

    /**
     * Delete product for an existing orden
     * Delete Product
     */
    async ordersDeleteProduct(requestParameters: OrdersDeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductOrderResponse> {
        const response = await this.ordersDeleteProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing product for an existing orden
     * Update Product
     */
    async ordersUpdateProductRaw(requestParameters: OrdersUpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersUpdateProduct.');
        }

        if (requestParameters.lineItemId === null || requestParameters.lineItemId === undefined) {
            throw new runtime.RequiredError('lineItemId','Required parameter requestParameters.lineItemId was null or undefined when calling ordersUpdateProduct.');
        }

        if (requestParameters.updateProduct === null || requestParameters.updateProduct === undefined) {
            throw new runtime.RequiredError('updateProduct','Required parameter requestParameters.updateProduct was null or undefined when calling ordersUpdateProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/line_items/{line_item_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"line_item_id"}}`, encodeURIComponent(String(requestParameters.lineItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductToJSON(requestParameters.updateProduct),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductOrderResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing product for an existing orden
     * Update Product
     */
    async ordersUpdateProduct(requestParameters: OrdersUpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductOrderResponse> {
        const response = await this.ordersUpdateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrdersCreateProductAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersCreateProductAcceptLanguageEnum = typeof OrdersCreateProductAcceptLanguageEnum[keyof typeof OrdersCreateProductAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersDeleteProductAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersDeleteProductAcceptLanguageEnum = typeof OrdersDeleteProductAcceptLanguageEnum[keyof typeof OrdersDeleteProductAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersUpdateProductAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersUpdateProductAcceptLanguageEnum = typeof OrdersUpdateProductAcceptLanguageEnum[keyof typeof OrdersUpdateProductAcceptLanguageEnum];
