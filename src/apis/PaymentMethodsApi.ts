/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomerPaymentMethodsRequest,
  CreateCustomerPaymentMethodsResponse,
  GetPaymentMethodResponse,
  ModelError,
  UpdateCustomerPaymentMethodsResponse,
  UpdatePaymentMethods,
} from '../models';
import {
    CreateCustomerPaymentMethodsRequestFromJSON,
    CreateCustomerPaymentMethodsRequestToJSON,
    CreateCustomerPaymentMethodsResponseFromJSON,
    CreateCustomerPaymentMethodsResponseToJSON,
    GetPaymentMethodResponseFromJSON,
    GetPaymentMethodResponseToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    UpdateCustomerPaymentMethodsResponseFromJSON,
    UpdateCustomerPaymentMethodsResponseToJSON,
    UpdatePaymentMethodsFromJSON,
    UpdatePaymentMethodsToJSON,
} from '../models';

export interface CreateCustomerPaymentMethodsOperationRequest {
    id: string;
    createCustomerPaymentMethodsRequest: CreateCustomerPaymentMethodsRequest;
    acceptLanguage?: CreateCustomerPaymentMethodsOperationAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface DeleteCustomerPaymentMethodsRequest {
    id: string;
    paymentMethodId: string;
    acceptLanguage?: DeleteCustomerPaymentMethodsAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetCustomerPaymentMethodsRequest {
    id: string;
    acceptLanguage?: GetCustomerPaymentMethodsAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    next?: string;
    previous?: string;
    search?: string;
}

export interface UpdateCustomerPaymentMethodsRequest {
    id: string;
    paymentMethodId: string;
    updatePaymentMethods: UpdatePaymentMethods;
    acceptLanguage?: UpdateCustomerPaymentMethodsAcceptLanguageEnum;
    xChildCompanyId?: string;
}

/**
 * 
 */
export class PaymentMethodsApi extends runtime.BaseAPI {

    /**
     * Create a payment method for a customer.
     * Create Payment Method
     */
    async createCustomerPaymentMethodsRaw(requestParameters: CreateCustomerPaymentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomerPaymentMethodsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createCustomerPaymentMethods.');
        }

        if (requestParameters.createCustomerPaymentMethodsRequest === null || requestParameters.createCustomerPaymentMethodsRequest === undefined) {
            throw new runtime.RequiredError('createCustomerPaymentMethodsRequest','Required parameter requestParameters.createCustomerPaymentMethodsRequest was null or undefined when calling createCustomerPaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{id}/payment_sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerPaymentMethodsRequestToJSON(requestParameters.createCustomerPaymentMethodsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCustomerPaymentMethodsResponseFromJSON(jsonValue));
    }

    /**
     * Create a payment method for a customer.
     * Create Payment Method
     */
    async createCustomerPaymentMethods(requestParameters: CreateCustomerPaymentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomerPaymentMethodsResponse> {
        const response = await this.createCustomerPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing payment method
     * Delete Payment Method
     */
    async deleteCustomerPaymentMethodsRaw(requestParameters: DeleteCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCustomerPaymentMethodsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomerPaymentMethods.');
        }

        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling deleteCustomerPaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{id}/payment_sources/{payment_method_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"payment_method_id"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCustomerPaymentMethodsResponseFromJSON(jsonValue));
    }

    /**
     * Delete an existing payment method
     * Delete Payment Method
     */
    async deleteCustomerPaymentMethods(requestParameters: DeleteCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCustomerPaymentMethodsResponse> {
        const response = await this.deleteCustomerPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Payment Methods
     * Get Payment Methods
     */
    async getCustomerPaymentMethodsRaw(requestParameters: GetCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaymentMethodResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomerPaymentMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        if (requestParameters.previous !== undefined) {
            queryParameters['previous'] = requestParameters.previous;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{id}/payment_sources`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentMethodResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of Payment Methods
     * Get Payment Methods
     */
    async getCustomerPaymentMethods(requestParameters: GetCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaymentMethodResponse> {
        const response = await this.getCustomerPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a payment Method that corresponds to a customer ID.
     * Update Payment Method
     */
    async updateCustomerPaymentMethodsRaw(requestParameters: UpdateCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCustomerPaymentMethodsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomerPaymentMethods.');
        }

        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling updateCustomerPaymentMethods.');
        }

        if (requestParameters.updatePaymentMethods === null || requestParameters.updatePaymentMethods === undefined) {
            throw new runtime.RequiredError('updatePaymentMethods','Required parameter requestParameters.updatePaymentMethods was null or undefined when calling updateCustomerPaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{id}/payment_sources/{payment_method_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"payment_method_id"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePaymentMethodsToJSON(requestParameters.updatePaymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCustomerPaymentMethodsResponseFromJSON(jsonValue));
    }

    /**
     * Gets a payment Method that corresponds to a customer ID.
     * Update Payment Method
     */
    async updateCustomerPaymentMethods(requestParameters: UpdateCustomerPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCustomerPaymentMethodsResponse> {
        const response = await this.updateCustomerPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateCustomerPaymentMethodsOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CreateCustomerPaymentMethodsOperationAcceptLanguageEnum = typeof CreateCustomerPaymentMethodsOperationAcceptLanguageEnum[keyof typeof CreateCustomerPaymentMethodsOperationAcceptLanguageEnum];
/**
 * @export
 */
export const DeleteCustomerPaymentMethodsAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type DeleteCustomerPaymentMethodsAcceptLanguageEnum = typeof DeleteCustomerPaymentMethodsAcceptLanguageEnum[keyof typeof DeleteCustomerPaymentMethodsAcceptLanguageEnum];
/**
 * @export
 */
export const GetCustomerPaymentMethodsAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetCustomerPaymentMethodsAcceptLanguageEnum = typeof GetCustomerPaymentMethodsAcceptLanguageEnum[keyof typeof GetCustomerPaymentMethodsAcceptLanguageEnum];
/**
 * @export
 */
export const UpdateCustomerPaymentMethodsAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type UpdateCustomerPaymentMethodsAcceptLanguageEnum = typeof UpdateCustomerPaymentMethodsAcceptLanguageEnum[keyof typeof UpdateCustomerPaymentMethodsAcceptLanguageEnum];
