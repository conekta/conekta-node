/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelError,
  Token,
  TokenResponse,
} from '../models';
import {
    ModelErrorFromJSON,
    ModelErrorToJSON,
    TokenFromJSON,
    TokenToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
} from '../models';

export interface CreateTokenRequest {
    token: Token;
    acceptLanguage?: CreateTokenAcceptLanguageEnum;
}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI {

    /**
     * Generate a payment token, to associate it with a card 
     * Create Token
     */
    async createTokenRaw(requestParameters: CreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling createToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenToJSON(requestParameters.token),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Generate a payment token, to associate it with a card 
     * Create Token
     */
    async createToken(requestParameters: CreateTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.createTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateTokenAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CreateTokenAcceptLanguageEnum = typeof CreateTokenAcceptLanguageEnum[keyof typeof CreateTokenAcceptLanguageEnum];
