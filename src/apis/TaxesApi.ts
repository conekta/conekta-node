/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelError,
  OrderTaxRequest,
  UpdateOrderTaxRequest,
  UpdateOrderTaxResponse,
} from '../models';
import {
    ModelErrorFromJSON,
    ModelErrorToJSON,
    OrderTaxRequestFromJSON,
    OrderTaxRequestToJSON,
    UpdateOrderTaxRequestFromJSON,
    UpdateOrderTaxRequestToJSON,
    UpdateOrderTaxResponseFromJSON,
    UpdateOrderTaxResponseToJSON,
} from '../models';

export interface OrdersCreateTaxesRequest {
    id: string;
    orderTaxRequest: OrderTaxRequest;
    acceptLanguage?: OrdersCreateTaxesAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersDeleteTaxesRequest {
    id: string;
    taxId: string;
    acceptLanguage?: OrdersDeleteTaxesAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersUpdateTaxesRequest {
    id: string;
    taxId: string;
    updateOrderTaxRequest: UpdateOrderTaxRequest;
    acceptLanguage?: OrdersUpdateTaxesAcceptLanguageEnum;
    xChildCompanyId?: string;
}

/**
 * 
 */
export class TaxesApi extends runtime.BaseAPI {

    /**
     * Create new taxes for an existing orden
     * Create Tax
     */
    async ordersCreateTaxesRaw(requestParameters: OrdersCreateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrderTaxResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersCreateTaxes.');
        }

        if (requestParameters.orderTaxRequest === null || requestParameters.orderTaxRequest === undefined) {
            throw new runtime.RequiredError('orderTaxRequest','Required parameter requestParameters.orderTaxRequest was null or undefined when calling ordersCreateTaxes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/tax_lines`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderTaxRequestToJSON(requestParameters.orderTaxRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrderTaxResponseFromJSON(jsonValue));
    }

    /**
     * Create new taxes for an existing orden
     * Create Tax
     */
    async ordersCreateTaxes(requestParameters: OrdersCreateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrderTaxResponse> {
        const response = await this.ordersCreateTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete taxes for an existing orden
     * Delete Tax
     */
    async ordersDeleteTaxesRaw(requestParameters: OrdersDeleteTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrderTaxResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersDeleteTaxes.');
        }

        if (requestParameters.taxId === null || requestParameters.taxId === undefined) {
            throw new runtime.RequiredError('taxId','Required parameter requestParameters.taxId was null or undefined when calling ordersDeleteTaxes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/tax_lines/{tax_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"tax_id"}}`, encodeURIComponent(String(requestParameters.taxId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrderTaxResponseFromJSON(jsonValue));
    }

    /**
     * Delete taxes for an existing orden
     * Delete Tax
     */
    async ordersDeleteTaxes(requestParameters: OrdersDeleteTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrderTaxResponse> {
        const response = await this.ordersDeleteTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update taxes for an existing orden
     * Update Tax
     */
    async ordersUpdateTaxesRaw(requestParameters: OrdersUpdateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrderTaxResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersUpdateTaxes.');
        }

        if (requestParameters.taxId === null || requestParameters.taxId === undefined) {
            throw new runtime.RequiredError('taxId','Required parameter requestParameters.taxId was null or undefined when calling ordersUpdateTaxes.');
        }

        if (requestParameters.updateOrderTaxRequest === null || requestParameters.updateOrderTaxRequest === undefined) {
            throw new runtime.RequiredError('updateOrderTaxRequest','Required parameter requestParameters.updateOrderTaxRequest was null or undefined when calling ordersUpdateTaxes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/tax_lines/{tax_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"tax_id"}}`, encodeURIComponent(String(requestParameters.taxId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrderTaxRequestToJSON(requestParameters.updateOrderTaxRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrderTaxResponseFromJSON(jsonValue));
    }

    /**
     * Update taxes for an existing orden
     * Update Tax
     */
    async ordersUpdateTaxes(requestParameters: OrdersUpdateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrderTaxResponse> {
        const response = await this.ordersUpdateTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrdersCreateTaxesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersCreateTaxesAcceptLanguageEnum = typeof OrdersCreateTaxesAcceptLanguageEnum[keyof typeof OrdersCreateTaxesAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersDeleteTaxesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersDeleteTaxesAcceptLanguageEnum = typeof OrdersDeleteTaxesAcceptLanguageEnum[keyof typeof OrdersDeleteTaxesAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersUpdateTaxesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersUpdateTaxesAcceptLanguageEnum = typeof OrdersUpdateTaxesAcceptLanguageEnum[keyof typeof OrdersUpdateTaxesAcceptLanguageEnum];
