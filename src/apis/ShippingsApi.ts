/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelError,
  ShippingOrderResponse,
  ShippingRequest,
} from '../models';
import {
    ModelErrorFromJSON,
    ModelErrorToJSON,
    ShippingOrderResponseFromJSON,
    ShippingOrderResponseToJSON,
    ShippingRequestFromJSON,
    ShippingRequestToJSON,
} from '../models';

export interface OrdersCreateShippingRequest {
    id: string;
    shippingRequest: ShippingRequest;
    acceptLanguage?: OrdersCreateShippingAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersDeleteShippingRequest {
    id: string;
    shippingId: string;
    acceptLanguage?: OrdersDeleteShippingAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersUpdateShippingRequest {
    id: string;
    shippingId: string;
    shippingRequest: ShippingRequest;
    acceptLanguage?: OrdersUpdateShippingAcceptLanguageEnum;
    xChildCompanyId?: string;
}

/**
 * 
 */
export class ShippingsApi extends runtime.BaseAPI {

    /**
     * Create new shipping for an existing orden
     * Create Shipping
     */
    async ordersCreateShippingRaw(requestParameters: OrdersCreateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersCreateShipping.');
        }

        if (requestParameters.shippingRequest === null || requestParameters.shippingRequest === undefined) {
            throw new runtime.RequiredError('shippingRequest','Required parameter requestParameters.shippingRequest was null or undefined when calling ordersCreateShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/shipping_lines`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingRequestToJSON(requestParameters.shippingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingOrderResponseFromJSON(jsonValue));
    }

    /**
     * Create new shipping for an existing orden
     * Create Shipping
     */
    async ordersCreateShipping(requestParameters: OrdersCreateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingOrderResponse> {
        const response = await this.ordersCreateShippingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete shipping
     * Delete Shipping
     */
    async ordersDeleteShippingRaw(requestParameters: OrdersDeleteShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersDeleteShipping.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling ordersDeleteShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/shipping_lines/{shipping_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"shipping_id"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingOrderResponseFromJSON(jsonValue));
    }

    /**
     * Delete shipping
     * Delete Shipping
     */
    async ordersDeleteShipping(requestParameters: OrdersDeleteShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingOrderResponse> {
        const response = await this.ordersDeleteShippingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing shipping for an existing orden
     * Update Shipping
     */
    async ordersUpdateShippingRaw(requestParameters: OrdersUpdateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingOrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersUpdateShipping.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling ordersUpdateShipping.');
        }

        if (requestParameters.shippingRequest === null || requestParameters.shippingRequest === undefined) {
            throw new runtime.RequiredError('shippingRequest','Required parameter requestParameters.shippingRequest was null or undefined when calling ordersUpdateShipping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/shipping_lines/{shipping_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"shipping_id"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingRequestToJSON(requestParameters.shippingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingOrderResponseFromJSON(jsonValue));
    }

    /**
     * Update existing shipping for an existing orden
     * Update Shipping
     */
    async ordersUpdateShipping(requestParameters: OrdersUpdateShippingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingOrderResponse> {
        const response = await this.ordersUpdateShippingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrdersCreateShippingAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersCreateShippingAcceptLanguageEnum = typeof OrdersCreateShippingAcceptLanguageEnum[keyof typeof OrdersCreateShippingAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersDeleteShippingAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersDeleteShippingAcceptLanguageEnum = typeof OrdersDeleteShippingAcceptLanguageEnum[keyof typeof OrdersDeleteShippingAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersUpdateShippingAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersUpdateShippingAcceptLanguageEnum = typeof OrdersUpdateShippingAcceptLanguageEnum[keyof typeof OrdersUpdateShippingAcceptLanguageEnum];
