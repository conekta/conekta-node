/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetOrdersResponse,
  ModelError,
  OrderCaptureRequest,
  OrderRefundRequest,
  OrderRequest,
  OrderResponse,
  OrderUpdateRequest,
} from '../models';
import {
    GetOrdersResponseFromJSON,
    GetOrdersResponseToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    OrderCaptureRequestFromJSON,
    OrderCaptureRequestToJSON,
    OrderRefundRequestFromJSON,
    OrderRefundRequestToJSON,
    OrderRequestFromJSON,
    OrderRequestToJSON,
    OrderResponseFromJSON,
    OrderResponseToJSON,
    OrderUpdateRequestFromJSON,
    OrderUpdateRequestToJSON,
} from '../models';

export interface CancelOrderRequest {
    id: string;
    acceptLanguage?: CancelOrderAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface CreateOrderRequest {
    orderRequest: OrderRequest;
    acceptLanguage?: CreateOrderAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetOrderByIdRequest {
    id: string;
    acceptLanguage?: GetOrderByIdAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetOrdersRequest {
    acceptLanguage?: GetOrdersAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    search?: string;
    next?: string;
    previous?: string;
}

export interface OrderCancelRefundRequest {
    id: string;
    refundId: string;
    acceptLanguage?: OrderCancelRefundAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrderRefundOperationRequest {
    id: string;
    orderRefundRequest: OrderRefundRequest;
    acceptLanguage?: OrderRefundOperationAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersCreateCaptureRequest {
    id: string;
    acceptLanguage?: OrdersCreateCaptureAcceptLanguageEnum;
    xChildCompanyId?: string;
    orderCaptureRequest?: OrderCaptureRequest;
}

export interface UpdateOrderRequest {
    id: string;
    orderUpdateRequest: OrderUpdateRequest;
    acceptLanguage?: UpdateOrderAcceptLanguageEnum;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     * Cancel an order that has been previously created.
     * Cancel Order
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Cancel an order that has been previously created.
     * Cancel Order
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new order.
     * Create order
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderRequest === null || requestParameters.orderRequest === undefined) {
            throw new runtime.RequiredError('orderRequest','Required parameter requestParameters.orderRequest was null or undefined when calling createOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderRequestToJSON(requestParameters.orderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Create a new order.
     * Create order
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific order
     * Get Order
     */
    async getOrderByIdRaw(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrderById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Info for a specific order
     * Get Order
     */
    async getOrderById(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get order details in the form of a list
     * Get a list of Orders
     */
    async getOrdersRaw(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrdersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        if (requestParameters.previous !== undefined) {
            queryParameters['previous'] = requestParameters.previous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrdersResponseFromJSON(jsonValue));
    }

    /**
     * Get order details in the form of a list
     * Get a list of Orders
     */
    async getOrders(requestParameters: GetOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrdersResponse> {
        const response = await this.getOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Cancel Refund
     */
    async orderCancelRefundRaw(requestParameters: OrderCancelRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling orderCancelRefund.');
        }

        if (requestParameters.refundId === null || requestParameters.refundId === undefined) {
            throw new runtime.RequiredError('refundId','Required parameter requestParameters.refundId was null or undefined when calling orderCancelRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/refunds/{refund_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"refund_id"}}`, encodeURIComponent(String(requestParameters.refundId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Cancel Refund
     */
    async orderCancelRefund(requestParameters: OrderCancelRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.orderCancelRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Refund Order
     */
    async orderRefundRaw(requestParameters: OrderRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling orderRefund.');
        }

        if (requestParameters.orderRefundRequest === null || requestParameters.orderRefundRequest === undefined) {
            throw new runtime.RequiredError('orderRefundRequest','Required parameter requestParameters.orderRefundRequest was null or undefined when calling orderRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/refunds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderRefundRequestToJSON(requestParameters.orderRefundRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * A refunded order describes the items, amount, and reason an order is being refunded.
     * Refund Order
     */
    async orderRefund(requestParameters: OrderRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.orderRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes an order that has been previously authorized.
     * Capture Order
     */
    async ordersCreateCaptureRaw(requestParameters: OrdersCreateCaptureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersCreateCapture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/capture`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCaptureRequestToJSON(requestParameters.orderCaptureRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Processes an order that has been previously authorized.
     * Capture Order
     */
    async ordersCreateCapture(requestParameters: OrdersCreateCaptureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.ordersCreateCaptureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Order.
     * Update Order
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrder.');
        }

        if (requestParameters.orderUpdateRequest === null || requestParameters.orderUpdateRequest === undefined) {
            throw new runtime.RequiredError('orderUpdateRequest','Required parameter requestParameters.orderUpdateRequest was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateRequestToJSON(requestParameters.orderUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing Order.
     * Update Order
     */
    async updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CancelOrderAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CancelOrderAcceptLanguageEnum = typeof CancelOrderAcceptLanguageEnum[keyof typeof CancelOrderAcceptLanguageEnum];
/**
 * @export
 */
export const CreateOrderAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CreateOrderAcceptLanguageEnum = typeof CreateOrderAcceptLanguageEnum[keyof typeof CreateOrderAcceptLanguageEnum];
/**
 * @export
 */
export const GetOrderByIdAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetOrderByIdAcceptLanguageEnum = typeof GetOrderByIdAcceptLanguageEnum[keyof typeof GetOrderByIdAcceptLanguageEnum];
/**
 * @export
 */
export const GetOrdersAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetOrdersAcceptLanguageEnum = typeof GetOrdersAcceptLanguageEnum[keyof typeof GetOrdersAcceptLanguageEnum];
/**
 * @export
 */
export const OrderCancelRefundAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrderCancelRefundAcceptLanguageEnum = typeof OrderCancelRefundAcceptLanguageEnum[keyof typeof OrderCancelRefundAcceptLanguageEnum];
/**
 * @export
 */
export const OrderRefundOperationAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrderRefundOperationAcceptLanguageEnum = typeof OrderRefundOperationAcceptLanguageEnum[keyof typeof OrderRefundOperationAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersCreateCaptureAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersCreateCaptureAcceptLanguageEnum = typeof OrdersCreateCaptureAcceptLanguageEnum[keyof typeof OrdersCreateCaptureAcceptLanguageEnum];
/**
 * @export
 */
export const UpdateOrderAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type UpdateOrderAcceptLanguageEnum = typeof UpdateOrderAcceptLanguageEnum[keyof typeof UpdateOrderAcceptLanguageEnum];
