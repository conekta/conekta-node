/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DiscountLinesResponse,
  ModelError,
  OrderDiscountLinesRequest,
  UpdateOrderDiscountLinesRequest,
} from '../models';
import {
    DiscountLinesResponseFromJSON,
    DiscountLinesResponseToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    OrderDiscountLinesRequestFromJSON,
    OrderDiscountLinesRequestToJSON,
    UpdateOrderDiscountLinesRequestFromJSON,
    UpdateOrderDiscountLinesRequestToJSON,
} from '../models';

export interface OrdersCreateDiscountLineRequest {
    id: string;
    orderDiscountLinesRequest: OrderDiscountLinesRequest;
    acceptLanguage?: OrdersCreateDiscountLineAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersDeleteDiscountLinesRequest {
    id: string;
    discountLinesId: string;
    acceptLanguage?: OrdersDeleteDiscountLinesAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface OrdersUpdateDiscountLinesRequest {
    id: string;
    discountLinesId: string;
    updateOrderDiscountLinesRequest: UpdateOrderDiscountLinesRequest;
    acceptLanguage?: OrdersUpdateDiscountLinesAcceptLanguageEnum;
    xChildCompanyId?: string;
}

/**
 * 
 */
export class DiscountsApi extends runtime.BaseAPI {

    /**
     * Create discount lines for an existing orden
     * Create Discount
     */
    async ordersCreateDiscountLineRaw(requestParameters: OrdersCreateDiscountLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLinesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersCreateDiscountLine.');
        }

        if (requestParameters.orderDiscountLinesRequest === null || requestParameters.orderDiscountLinesRequest === undefined) {
            throw new runtime.RequiredError('orderDiscountLinesRequest','Required parameter requestParameters.orderDiscountLinesRequest was null or undefined when calling ordersCreateDiscountLine.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/discount_lines`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderDiscountLinesRequestToJSON(requestParameters.orderDiscountLinesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountLinesResponseFromJSON(jsonValue));
    }

    /**
     * Create discount lines for an existing orden
     * Create Discount
     */
    async ordersCreateDiscountLine(requestParameters: OrdersCreateDiscountLineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLinesResponse> {
        const response = await this.ordersCreateDiscountLineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing discount lines for an existing orden
     * Delete Discount
     */
    async ordersDeleteDiscountLinesRaw(requestParameters: OrdersDeleteDiscountLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLinesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersDeleteDiscountLines.');
        }

        if (requestParameters.discountLinesId === null || requestParameters.discountLinesId === undefined) {
            throw new runtime.RequiredError('discountLinesId','Required parameter requestParameters.discountLinesId was null or undefined when calling ordersDeleteDiscountLines.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/discount_lines/{discount_lines_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"discount_lines_id"}}`, encodeURIComponent(String(requestParameters.discountLinesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountLinesResponseFromJSON(jsonValue));
    }

    /**
     * Delete an existing discount lines for an existing orden
     * Delete Discount
     */
    async ordersDeleteDiscountLines(requestParameters: OrdersDeleteDiscountLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLinesResponse> {
        const response = await this.ordersDeleteDiscountLinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing discount lines for an existing orden
     * Update Discount
     */
    async ordersUpdateDiscountLinesRaw(requestParameters: OrdersUpdateDiscountLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLinesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersUpdateDiscountLines.');
        }

        if (requestParameters.discountLinesId === null || requestParameters.discountLinesId === undefined) {
            throw new runtime.RequiredError('discountLinesId','Required parameter requestParameters.discountLinesId was null or undefined when calling ordersUpdateDiscountLines.');
        }

        if (requestParameters.updateOrderDiscountLinesRequest === null || requestParameters.updateOrderDiscountLinesRequest === undefined) {
            throw new runtime.RequiredError('updateOrderDiscountLinesRequest','Required parameter requestParameters.updateOrderDiscountLinesRequest was null or undefined when calling ordersUpdateDiscountLines.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{id}/discount_lines/{discount_lines_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"discount_lines_id"}}`, encodeURIComponent(String(requestParameters.discountLinesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrderDiscountLinesRequestToJSON(requestParameters.updateOrderDiscountLinesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountLinesResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing discount lines for an existing orden
     * Update Discount
     */
    async ordersUpdateDiscountLines(requestParameters: OrdersUpdateDiscountLinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLinesResponse> {
        const response = await this.ordersUpdateDiscountLinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrdersCreateDiscountLineAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersCreateDiscountLineAcceptLanguageEnum = typeof OrdersCreateDiscountLineAcceptLanguageEnum[keyof typeof OrdersCreateDiscountLineAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersDeleteDiscountLinesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersDeleteDiscountLinesAcceptLanguageEnum = typeof OrdersDeleteDiscountLinesAcceptLanguageEnum[keyof typeof OrdersDeleteDiscountLinesAcceptLanguageEnum];
/**
 * @export
 */
export const OrdersUpdateDiscountLinesAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type OrdersUpdateDiscountLinesAcceptLanguageEnum = typeof OrdersUpdateDiscountLinesAcceptLanguageEnum[keyof typeof OrdersUpdateDiscountLinesAcceptLanguageEnum];
