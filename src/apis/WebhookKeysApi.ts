/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetWebhookKeysResponse,
  ModelError,
  WebhookKeyCreateResponse,
  WebhookKeyDeleteResponse,
  WebhookKeyRequest,
  WebhookKeyResponse,
  WebhookKeyUpdateRequest,
} from '../models';
import {
    GetWebhookKeysResponseFromJSON,
    GetWebhookKeysResponseToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    WebhookKeyCreateResponseFromJSON,
    WebhookKeyCreateResponseToJSON,
    WebhookKeyDeleteResponseFromJSON,
    WebhookKeyDeleteResponseToJSON,
    WebhookKeyRequestFromJSON,
    WebhookKeyRequestToJSON,
    WebhookKeyResponseFromJSON,
    WebhookKeyResponseToJSON,
    WebhookKeyUpdateRequestFromJSON,
    WebhookKeyUpdateRequestToJSON,
} from '../models';

export interface CreateWebhookKeyRequest {
    acceptLanguage?: CreateWebhookKeyAcceptLanguageEnum;
    webhookKeyRequest?: WebhookKeyRequest;
}

export interface DeleteWebhookKeyRequest {
    id: string;
    acceptLanguage?: DeleteWebhookKeyAcceptLanguageEnum;
}

export interface GetWebhookKeyRequest {
    id: string;
    acceptLanguage?: GetWebhookKeyAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetWebhookKeysRequest {
    acceptLanguage?: GetWebhookKeysAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    search?: string;
    next?: string;
    previous?: string;
}

export interface UpdateWebhookKeyRequest {
    id: string;
    acceptLanguage?: UpdateWebhookKeyAcceptLanguageEnum;
    webhookKeyUpdateRequest?: WebhookKeyUpdateRequest;
}

/**
 * 
 */
export class WebhookKeysApi extends runtime.BaseAPI {

    /**
     * Create a webhook key
     * Create Webhook Key
     */
    async createWebhookKeyRaw(requestParameters: CreateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyCreateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhook_keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookKeyRequestToJSON(requestParameters.webhookKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookKeyCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a webhook key
     * Create Webhook Key
     */
    async createWebhookKey(requestParameters: CreateWebhookKeyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyCreateResponse> {
        const response = await this.createWebhookKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Webhook key
     */
    async deleteWebhookKeyRaw(requestParameters: DeleteWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyDeleteResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWebhookKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhook_keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookKeyDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete Webhook key
     */
    async deleteWebhookKey(requestParameters: DeleteWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyDeleteResponse> {
        const response = await this.deleteWebhookKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Webhook Key
     */
    async getWebhookKeyRaw(requestParameters: GetWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWebhookKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhook_keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get Webhook Key
     */
    async getWebhookKey(requestParameters: GetWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyResponse> {
        const response = await this.getWebhookKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Consume the list of webhook keys you have
     * Get List of Webhook Keys
     */
    async getWebhookKeysRaw(requestParameters: GetWebhookKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhookKeysResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        if (requestParameters.previous !== undefined) {
            queryParameters['previous'] = requestParameters.previous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhook_keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWebhookKeysResponseFromJSON(jsonValue));
    }

    /**
     * Consume the list of webhook keys you have
     * Get List of Webhook Keys
     */
    async getWebhookKeys(requestParameters: GetWebhookKeysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhookKeysResponse> {
        const response = await this.getWebhookKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updates an existing webhook key
     * Update Webhook Key
     */
    async updateWebhookKeyRaw(requestParameters: UpdateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookKeyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWebhookKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhook_keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookKeyUpdateRequestToJSON(requestParameters.webhookKeyUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookKeyResponseFromJSON(jsonValue));
    }

    /**
     * updates an existing webhook key
     * Update Webhook Key
     */
    async updateWebhookKey(requestParameters: UpdateWebhookKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookKeyResponse> {
        const response = await this.updateWebhookKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateWebhookKeyAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type CreateWebhookKeyAcceptLanguageEnum = typeof CreateWebhookKeyAcceptLanguageEnum[keyof typeof CreateWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export const DeleteWebhookKeyAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type DeleteWebhookKeyAcceptLanguageEnum = typeof DeleteWebhookKeyAcceptLanguageEnum[keyof typeof DeleteWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export const GetWebhookKeyAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetWebhookKeyAcceptLanguageEnum = typeof GetWebhookKeyAcceptLanguageEnum[keyof typeof GetWebhookKeyAcceptLanguageEnum];
/**
 * @export
 */
export const GetWebhookKeysAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetWebhookKeysAcceptLanguageEnum = typeof GetWebhookKeysAcceptLanguageEnum[keyof typeof GetWebhookKeysAcceptLanguageEnum];
/**
 * @export
 */
export const UpdateWebhookKeyAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type UpdateWebhookKeyAcceptLanguageEnum = typeof UpdateWebhookKeyAcceptLanguageEnum[keyof typeof UpdateWebhookKeyAcceptLanguageEnum];
