/* tslint:disable */
/* eslint-disable */
/**
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetTransfersResponse,
  ModelError,
  TransferResponse,
} from '../models';
import {
    GetTransfersResponseFromJSON,
    GetTransfersResponseToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    TransferResponseFromJSON,
    TransferResponseToJSON,
} from '../models';

export interface GetTransferRequest {
    id: string;
    acceptLanguage?: GetTransferAcceptLanguageEnum;
    xChildCompanyId?: string;
}

export interface GetTransfersRequest {
    acceptLanguage?: GetTransfersAcceptLanguageEnum;
    xChildCompanyId?: string;
    limit?: number;
    search?: string;
    next?: string;
    previous?: string;
}

/**
 * 
 */
export class TransfersApi extends runtime.BaseAPI {

    /**
     * Get the details of a Transfer
     * Get Transfer
     */
    async getTransferRaw(requestParameters: GetTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTransfer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transfers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferResponseFromJSON(jsonValue));
    }

    /**
     * Get the details of a Transfer
     * Get Transfer
     */
    async getTransfer(requestParameters: GetTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferResponse> {
        const response = await this.getTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transfers details in the form of a list
     * Get a list of transfers
     */
    async getTransfersRaw(requestParameters: GetTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransfersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        if (requestParameters.previous !== undefined) {
            queryParameters['previous'] = requestParameters.previous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        if (requestParameters.xChildCompanyId !== undefined && requestParameters.xChildCompanyId !== null) {
            headerParameters['X-Child-Company-Id'] = String(requestParameters.xChildCompanyId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransfersResponseFromJSON(jsonValue));
    }

    /**
     * Get transfers details in the form of a list
     * Get a list of transfers
     */
    async getTransfers(requestParameters: GetTransfersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransfersResponse> {
        const response = await this.getTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTransferAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetTransferAcceptLanguageEnum = typeof GetTransferAcceptLanguageEnum[keyof typeof GetTransferAcceptLanguageEnum];
/**
 * @export
 */
export const GetTransfersAcceptLanguageEnum = {
    Es: 'es',
    En: 'en'
} as const;
export type GetTransfersAcceptLanguageEnum = typeof GetTransfersAcceptLanguageEnum[keyof typeof GetTransfersAcceptLanguageEnum];
